// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: bin.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseBin       *BasePlayer            `protobuf:"bytes,1,opt,name=base_bin,json=baseBin,proto3" json:"base_bin,omitempty"`                    // 基础信息
	AcademyBin    *AcademyBin            `protobuf:"bytes,2,opt,name=academy_bin,json=academyBin,proto3" json:"academy_bin,omitempty"`           // 学院信息
	CafeBin       *CafeBin               `protobuf:"bytes,3,opt,name=cafe_bin,json=cafeBin,proto3" json:"cafe_bin,omitempty"`                    // 咖啡馆信息
	MailBin       *MailBin               `protobuf:"bytes,4,opt,name=mail_bin,json=mailBin,proto3" json:"mail_bin,omitempty"`                    // 邮箱配置
	CharacterBin  *CharacterBin          `protobuf:"bytes,5,opt,name=character_bin,json=characterBin,proto3" json:"character_bin,omitempty"`     // 角色信息
	ItemBin       *ItemBin               `protobuf:"bytes,6,opt,name=item_bin,json=itemBin,proto3" json:"item_bin,omitempty"`                    // 背包物品
	MissionBin    *MissionBin            `protobuf:"bytes,7,opt,name=mission_bin,json=missionBin,proto3" json:"mission_bin,omitempty"`           // 剧情信息
	ServerId      int64                  `protobuf:"varint,8,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                // 唯一id计数器
	EchelonBin    *EchelonBin            `protobuf:"bytes,9,opt,name=echelon_bin,json=echelonBin,proto3" json:"echelon_bin,omitempty"`           // 队伍信息
	GachaBin      *GachaBin              `protobuf:"bytes,10,opt,name=gacha_bin,json=gachaBin,proto3" json:"gacha_bin,omitempty"`                // 抽卡记录
	CampaignBin   *CampaignBin           `protobuf:"bytes,11,opt,name=campaign_bin,json=campaignBin,proto3" json:"campaign_bin,omitempty"`       // 任务信息
	AttachmentBin *AttachmentBin         `protobuf:"bytes,12,opt,name=attachment_bin,json=attachmentBin,proto3" json:"attachment_bin,omitempty"` // 玩家档案
	MomoTalkBin   *MomoTalkBin           `protobuf:"bytes,13,opt,name=momo_talk_bin,json=momoTalkBin,proto3" json:"momo_talk_bin,omitempty"`     // MomoTalk 信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBin) Reset() {
	*x = PlayerBin{}
	mi := &file_bin_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBin) ProtoMessage() {}

func (x *PlayerBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBin.ProtoReflect.Descriptor instead.
func (*PlayerBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerBin) GetBaseBin() *BasePlayer {
	if x != nil {
		return x.BaseBin
	}
	return nil
}

func (x *PlayerBin) GetAcademyBin() *AcademyBin {
	if x != nil {
		return x.AcademyBin
	}
	return nil
}

func (x *PlayerBin) GetCafeBin() *CafeBin {
	if x != nil {
		return x.CafeBin
	}
	return nil
}

func (x *PlayerBin) GetMailBin() *MailBin {
	if x != nil {
		return x.MailBin
	}
	return nil
}

func (x *PlayerBin) GetCharacterBin() *CharacterBin {
	if x != nil {
		return x.CharacterBin
	}
	return nil
}

func (x *PlayerBin) GetItemBin() *ItemBin {
	if x != nil {
		return x.ItemBin
	}
	return nil
}

func (x *PlayerBin) GetMissionBin() *MissionBin {
	if x != nil {
		return x.MissionBin
	}
	return nil
}

func (x *PlayerBin) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *PlayerBin) GetEchelonBin() *EchelonBin {
	if x != nil {
		return x.EchelonBin
	}
	return nil
}

func (x *PlayerBin) GetGachaBin() *GachaBin {
	if x != nil {
		return x.GachaBin
	}
	return nil
}

func (x *PlayerBin) GetCampaignBin() *CampaignBin {
	if x != nil {
		return x.CampaignBin
	}
	return nil
}

func (x *PlayerBin) GetAttachmentBin() *AttachmentBin {
	if x != nil {
		return x.AttachmentBin
	}
	return nil
}

func (x *PlayerBin) GetMomoTalkBin() *MomoTalkBin {
	if x != nil {
		return x.MomoTalkBin
	}
	return nil
}

type BasePlayer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountId       int64                  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                     // 账号id
	Level           int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                              // 账号等级
	Nickname        string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                         // 账号昵称
	CreateDate      int64                  `protobuf:"varint,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`                  // 账号创建时间
	LastConnectTime int64                  `protobuf:"varint,5,opt,name=last_connect_time,json=lastConnectTime,proto3" json:"last_connect_time,omitempty"` // 上次登录时间
	EmblemUniqueId  int64                  `protobuf:"varint,6,opt,name=emblem_unique_id,json=emblemUniqueId,proto3" json:"emblem_unique_id,omitempty"`    // 称号
	Comment         string                 `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`                                           // 签名
	LobbyStudent    int64                  `protobuf:"varint,8,opt,name=lobby_student,json=lobbyStudent,proto3" json:"lobby_student,omitempty"`            // 值日生
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BasePlayer) Reset() {
	*x = BasePlayer{}
	mi := &file_bin_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePlayer) ProtoMessage() {}

func (x *BasePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePlayer.ProtoReflect.Descriptor instead.
func (*BasePlayer) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{1}
}

func (x *BasePlayer) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *BasePlayer) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BasePlayer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BasePlayer) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *BasePlayer) GetLastConnectTime() int64 {
	if x != nil {
		return x.LastConnectTime
	}
	return 0
}

func (x *BasePlayer) GetEmblemUniqueId() int64 {
	if x != nil {
		return x.EmblemUniqueId
	}
	return 0
}

func (x *BasePlayer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BasePlayer) GetLobbyStudent() int64 {
	if x != nil {
		return x.LobbyStudent
	}
	return 0
}

type AcademyBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcademyBin) Reset() {
	*x = AcademyBin{}
	mi := &file_bin_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyBin) ProtoMessage() {}

func (x *AcademyBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyBin.ProtoReflect.Descriptor instead.
func (*AcademyBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{2}
}

type CafeBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CafeInfoList  map[int64]*CafeInfo    `protobuf:"bytes,1,rep,name=cafe_info_list,json=cafeInfoList,proto3" json:"cafe_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 咖啡馆集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CafeBin) Reset() {
	*x = CafeBin{}
	mi := &file_bin_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeBin) ProtoMessage() {}

func (x *CafeBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeBin.ProtoReflect.Descriptor instead.
func (*CafeBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{3}
}

func (x *CafeBin) GetCafeInfoList() map[int64]*CafeInfo {
	if x != nil {
		return x.CafeInfoList
	}
	return nil
}

type CafeInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CafeId                int64                  `protobuf:"varint,1,opt,name=cafe_id,json=cafeId,proto3" json:"cafe_id,omitempty"`                                                // 咖啡馆id
	LaseUpdateTime        int64                  `protobuf:"varint,2,opt,name=lase_update_time,json=laseUpdateTime,proto3" json:"lase_update_time,omitempty"`                      // 最近一次更新时间
	CafeRank              int32                  `protobuf:"varint,3,opt,name=cafe_rank,json=cafeRank,proto3" json:"cafe_rank,omitempty"`                                          // 等级
	ProductionAppliedTime int64                  `protobuf:"varint,4,opt,name=production_applied_time,json=productionAppliedTime,proto3" json:"production_applied_time,omitempty"` // 生产开始时间？
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CafeInfo) Reset() {
	*x = CafeInfo{}
	mi := &file_bin_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfo) ProtoMessage() {}

func (x *CafeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfo.ProtoReflect.Descriptor instead.
func (*CafeInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{4}
}

func (x *CafeInfo) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfo) GetLaseUpdateTime() int64 {
	if x != nil {
		return x.LaseUpdateTime
	}
	return 0
}

func (x *CafeInfo) GetCafeRank() int32 {
	if x != nil {
		return x.CafeRank
	}
	return 0
}

func (x *CafeInfo) GetProductionAppliedTime() int64 {
	if x != nil {
		return x.ProductionAppliedTime
	}
	return 0
}

type CharacterBin struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	CharacterInfoList map[int64]*CharacterInfo `protobuf:"bytes,1,rep,name=character_info_list,json=characterInfoList,proto3" json:"character_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 角色数据
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CharacterBin) Reset() {
	*x = CharacterBin{}
	mi := &file_bin_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterBin) ProtoMessage() {}

func (x *CharacterBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterBin.ProtoReflect.Descriptor instead.
func (*CharacterBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{5}
}

func (x *CharacterBin) GetCharacterInfoList() map[int64]*CharacterInfo {
	if x != nil {
		return x.CharacterInfoList
	}
	return nil
}

type CharacterInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`      // 角色id
	Level                  int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                     // 等级
	Exp                    int64                  `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`                                         // 经验
	FavorRank              int32                  `protobuf:"varint,4,opt,name=favor_rank,json=favorRank,proto3" json:"favor_rank,omitempty"`            // 好感度等级
	FavorExp               int64                  `protobuf:"varint,5,opt,name=favor_exp,json=favorExp,proto3" json:"favor_exp,omitempty"`               // 好感度经验
	StarGrade              int32                  `protobuf:"varint,6,opt,name=star_grade,json=starGrade,proto3" json:"star_grade,omitempty"`            // 星级
	ExSkillLevel           int32                  `protobuf:"varint,7,opt,name=ex_skill_level,json=exSkillLevel,proto3" json:"ex_skill_level,omitempty"` // ex 技能
	PassiveSkillLevel      int32                  `protobuf:"varint,8,opt,name=passive_skillLevel,json=passiveSkillLevel,proto3" json:"passive_skillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,9,opt,name=extra_passive_skillLevel,json=extraPassiveSkillLevel,proto3" json:"extra_passive_skillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,10,opt,name=common_skill_level,json=commonSkillLevel,proto3" json:"common_skill_level,omitempty"` // 基本技能
	LeaderSkillLevel       int32                  `protobuf:"varint,11,opt,name=leader_skill_level,json=leaderSkillLevel,proto3" json:"leader_skill_level,omitempty"`
	EquipmentList          map[string]int64       `protobuf:"bytes,12,rep,name=equipment_list,json=equipmentList,proto3" json:"equipment_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 装备
	ServerId               int64                  `protobuf:"varint,13,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                                                                                          //  唯一id
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CharacterInfo) Reset() {
	*x = CharacterInfo{}
	mi := &file_bin_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterInfo) ProtoMessage() {}

func (x *CharacterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterInfo.ProtoReflect.Descriptor instead.
func (*CharacterInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{6}
}

func (x *CharacterInfo) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharacterInfo) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *CharacterInfo) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *CharacterInfo) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *CharacterInfo) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *CharacterInfo) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetEquipmentList() map[string]int64 {
	if x != nil {
		return x.EquipmentList
	}
	return nil
}

func (x *CharacterInfo) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type ItemBin struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	ItemInfoList     map[int64]*ItemInfo     `protobuf:"bytes,1,rep,name=item_info_list,json=itemInfoList,proto3" json:"item_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`             // type 4
	CurrencyInfoList map[int32]*CurrencyInfo `protobuf:"bytes,2,rep,name=currency_info_list,json=currencyInfoList,proto3" json:"currency_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 货币
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ItemBin) Reset() {
	*x = ItemBin{}
	mi := &file_bin_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBin) ProtoMessage() {}

func (x *ItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBin.ProtoReflect.Descriptor instead.
func (*ItemBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{7}
}

func (x *ItemBin) GetItemInfoList() map[int64]*ItemInfo {
	if x != nil {
		return x.ItemInfoList
	}
	return nil
}

func (x *ItemBin) GetCurrencyInfoList() map[int32]*CurrencyInfo {
	if x != nil {
		return x.CurrencyInfoList
	}
	return nil
}

type ItemInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      int64                  `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	UniqueId      int64                  `protobuf:"varint,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	StackCount    int32                  `protobuf:"varint,3,opt,name=stack_count,json=stackCount,proto3" json:"stack_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	mi := &file_bin_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{8}
}

func (x *ItemInfo) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ItemInfo) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *ItemInfo) GetStackCount() int32 {
	if x != nil {
		return x.StackCount
	}
	return 0
}

type CurrencyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyId    int32                  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyNum   int64                  `protobuf:"varint,2,opt,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	mi := &file_bin_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyInfo) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *CurrencyInfo) GetCurrencyNum() int64 {
	if x != nil {
		return x.CurrencyNum
	}
	return 0
}

func (x *CurrencyInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type MissionBin struct {
	state                        protoimpl.MessageState              `protogen:"open.v1"`
	TutorialList                 map[int64]bool                      `protobuf:"bytes,1,rep,name=tutorial_list,json=tutorialList,proto3" json:"tutorial_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`                                                      // 已完成的教程
	ScenarioGroupHistoryInfoList map[int64]*ScenarioGroupHistoryInfo `protobuf:"bytes,2,rep,name=scenario_group_history_info_list,json=scenarioGroupHistoryInfoList,proto3" json:"scenario_group_history_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 场景剧情完成信息
	ScenarioHistoryInfoList      map[int64]*ScenarioHistoryInfo      `protobuf:"bytes,3,rep,name=scenario_history_info_list,json=scenarioHistoryInfoList,proto3" json:"scenario_history_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                  // 剧情完成信息
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *MissionBin) Reset() {
	*x = MissionBin{}
	mi := &file_bin_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionBin) ProtoMessage() {}

func (x *MissionBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionBin.ProtoReflect.Descriptor instead.
func (*MissionBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{10}
}

func (x *MissionBin) GetTutorialList() map[int64]bool {
	if x != nil {
		return x.TutorialList
	}
	return nil
}

func (x *MissionBin) GetScenarioGroupHistoryInfoList() map[int64]*ScenarioGroupHistoryInfo {
	if x != nil {
		return x.ScenarioGroupHistoryInfoList
	}
	return nil
}

func (x *MissionBin) GetScenarioHistoryInfoList() map[int64]*ScenarioHistoryInfo {
	if x != nil {
		return x.ScenarioHistoryInfoList
	}
	return nil
}

type ScenarioGroupHistoryInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ScenarioGroupUqniueId int64                  `protobuf:"varint,1,opt,name=scenario_group_uqniue_id,json=scenarioGroupUqniueId,proto3" json:"scenario_group_uqniue_id,omitempty"`
	ClearDateTime         int64                  `protobuf:"varint,2,opt,name=clear_date_time,json=clearDateTime,proto3" json:"clear_date_time,omitempty"`
	ScenarioType          int64                  `protobuf:"varint,3,opt,name=scenario_type,json=scenarioType,proto3" json:"scenario_type,omitempty"`
	EventContentId        int64                  `protobuf:"varint,4,opt,name=event_content_id,json=eventContentId,proto3" json:"event_content_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ScenarioGroupHistoryInfo) Reset() {
	*x = ScenarioGroupHistoryInfo{}
	mi := &file_bin_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioGroupHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioGroupHistoryInfo) ProtoMessage() {}

func (x *ScenarioGroupHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioGroupHistoryInfo.ProtoReflect.Descriptor instead.
func (*ScenarioGroupHistoryInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{11}
}

func (x *ScenarioGroupHistoryInfo) GetScenarioGroupUqniueId() int64 {
	if x != nil {
		return x.ScenarioGroupUqniueId
	}
	return 0
}

func (x *ScenarioGroupHistoryInfo) GetClearDateTime() int64 {
	if x != nil {
		return x.ClearDateTime
	}
	return 0
}

func (x *ScenarioGroupHistoryInfo) GetScenarioType() int64 {
	if x != nil {
		return x.ScenarioType
	}
	return 0
}

func (x *ScenarioGroupHistoryInfo) GetEventContentId() int64 {
	if x != nil {
		return x.EventContentId
	}
	return 0
}

type ScenarioHistoryInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ScenarioUniqueId int64                  `protobuf:"varint,1,opt,name=scenario_unique_id,json=scenarioUniqueId,proto3" json:"scenario_unique_id,omitempty"`
	ClearDateTime    int64                  `protobuf:"varint,2,opt,name=clear_date_time,json=clearDateTime,proto3" json:"clear_date_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ScenarioHistoryInfo) Reset() {
	*x = ScenarioHistoryInfo{}
	mi := &file_bin_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioHistoryInfo) ProtoMessage() {}

func (x *ScenarioHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioHistoryInfo.ProtoReflect.Descriptor instead.
func (*ScenarioHistoryInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{12}
}

func (x *ScenarioHistoryInfo) GetScenarioUniqueId() int64 {
	if x != nil {
		return x.ScenarioUniqueId
	}
	return 0
}

func (x *ScenarioHistoryInfo) GetClearDateTime() int64 {
	if x != nil {
		return x.ClearDateTime
	}
	return 0
}

type EchelonBin struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	EchelonTypeInfoList   map[int32]*EchelonTypeInfo `protobuf:"bytes,1,rep,name=echelon_type_info_list,json=echelonTypeInfoList,proto3" json:"echelon_type_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`       // 队伍类型集合
	EchelonPresetGuidList map[int32]*EchelonTypeInfo `protobuf:"bytes,2,rep,name=echelon_preset_guid_list,json=echelonPresetGuidList,proto3" json:"echelon_preset_guid_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 预制队伍
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EchelonBin) Reset() {
	*x = EchelonBin{}
	mi := &file_bin_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchelonBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchelonBin) ProtoMessage() {}

func (x *EchelonBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchelonBin.ProtoReflect.Descriptor instead.
func (*EchelonBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{13}
}

func (x *EchelonBin) GetEchelonTypeInfoList() map[int32]*EchelonTypeInfo {
	if x != nil {
		return x.EchelonTypeInfoList
	}
	return nil
}

func (x *EchelonBin) GetEchelonPresetGuidList() map[int32]*EchelonTypeInfo {
	if x != nil {
		return x.EchelonPresetGuidList
	}
	return nil
}

type EchelonTypeInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EchelonInfoList map[int64]*EchelonInfo `protobuf:"bytes,1,rep,name=echelon_info_list,json=echelonInfoList,proto3" json:"echelon_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 队伍集合
	EchelonNum      int64                  `protobuf:"varint,2,opt,name=echelon_num,json=echelonNum,proto3" json:"echelon_num,omitempty"`                                                                                            // 累积队伍序号
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EchelonTypeInfo) Reset() {
	*x = EchelonTypeInfo{}
	mi := &file_bin_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchelonTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchelonTypeInfo) ProtoMessage() {}

func (x *EchelonTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchelonTypeInfo.ProtoReflect.Descriptor instead.
func (*EchelonTypeInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{14}
}

func (x *EchelonTypeInfo) GetEchelonInfoList() map[int64]*EchelonInfo {
	if x != nil {
		return x.EchelonInfoList
	}
	return nil
}

func (x *EchelonTypeInfo) GetEchelonNum() int64 {
	if x != nil {
		return x.EchelonNum
	}
	return 0
}

type EchelonInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	EchelonType          int32                  `protobuf:"varint,1,opt,name=echelon_type,json=echelonType,proto3" json:"echelon_type,omitempty"`                                                                                                         // 队伍类型
	ExtensionType        int32                  `protobuf:"varint,2,opt,name=extension_type,json=extensionType,proto3" json:"extension_type,omitempty"`                                                                                                   // 拓展类型
	EchelonNum           int64                  `protobuf:"varint,3,opt,name=echelon_num,json=echelonNum,proto3" json:"echelon_num,omitempty"`                                                                                                            // 队伍序号
	LeaderCharacter      int64                  `protobuf:"varint,4,opt,name=leader_character,json=leaderCharacter,proto3" json:"leader_character,omitempty"`                                                                                             // 队长
	MainCharacterList    map[int32]int64        `protobuf:"bytes,5,rep,name=main_character_list,json=mainCharacterList,proto3" json:"main_character_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`          // 主要角色
	SupportCharacterList map[int32]int64        `protobuf:"bytes,6,rep,name=support_character_list,json=supportCharacterList,proto3" json:"support_character_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 支援角色
	SkillCharacterList   map[int32]int64        `protobuf:"bytes,7,rep,name=skill_character_list,json=skillCharacterList,proto3" json:"skill_character_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`       // 优先释放技能角色
	TssId                int64                  `protobuf:"varint,8,opt,name=tss_id,json=tssId,proto3" json:"tss_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EchelonInfo) Reset() {
	*x = EchelonInfo{}
	mi := &file_bin_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchelonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchelonInfo) ProtoMessage() {}

func (x *EchelonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchelonInfo.ProtoReflect.Descriptor instead.
func (*EchelonInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{15}
}

func (x *EchelonInfo) GetEchelonType() int32 {
	if x != nil {
		return x.EchelonType
	}
	return 0
}

func (x *EchelonInfo) GetExtensionType() int32 {
	if x != nil {
		return x.ExtensionType
	}
	return 0
}

func (x *EchelonInfo) GetEchelonNum() int64 {
	if x != nil {
		return x.EchelonNum
	}
	return 0
}

func (x *EchelonInfo) GetLeaderCharacter() int64 {
	if x != nil {
		return x.LeaderCharacter
	}
	return 0
}

func (x *EchelonInfo) GetMainCharacterList() map[int32]int64 {
	if x != nil {
		return x.MainCharacterList
	}
	return nil
}

func (x *EchelonInfo) GetSupportCharacterList() map[int32]int64 {
	if x != nil {
		return x.SupportCharacterList
	}
	return nil
}

func (x *EchelonInfo) GetSkillCharacterList() map[int32]int64 {
	if x != nil {
		return x.SkillCharacterList
	}
	return nil
}

func (x *EchelonInfo) GetTssId() int64 {
	if x != nil {
		return x.TssId
	}
	return 0
}

type GachaBin struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BeforehandInfo *BeforehandInfo        `protobuf:"bytes,1,opt,name=beforehand_info,json=beforehandInfo,proto3" json:"beforehand_info,omitempty"` // 新手免费十连
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GachaBin) Reset() {
	*x = GachaBin{}
	mi := &file_bin_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GachaBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GachaBin) ProtoMessage() {}

func (x *GachaBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GachaBin.ProtoReflect.Descriptor instead.
func (*GachaBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{16}
}

func (x *GachaBin) GetBeforehandInfo() *BeforehandInfo {
	if x != nil {
		return x.BeforehandInfo
	}
	return nil
}

type BeforehandInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlreadyPicked bool                   `protobuf:"varint,1,opt,name=already_picked,json=alreadyPicked,proto3" json:"already_picked,omitempty"`
	ShopUniqueId  int64                  `protobuf:"varint,2,opt,name=shop_unique_id,json=shopUniqueId,proto3" json:"shop_unique_id,omitempty"`
	LastIndex     int64                  `protobuf:"varint,3,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"` // max 9
	SavedIndex    int64                  `protobuf:"varint,4,opt,name=saved_index,json=savedIndex,proto3" json:"saved_index,omitempty"`
	LastResults   []int64                `protobuf:"varint,5,rep,packed,name=last_results,json=lastResults,proto3" json:"last_results,omitempty"`
	SavedResults  []int64                `protobuf:"varint,6,rep,packed,name=saved_results,json=savedResults,proto3" json:"saved_results,omitempty"`
	GoodsId       int64                  `protobuf:"varint,7,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeforehandInfo) Reset() {
	*x = BeforehandInfo{}
	mi := &file_bin_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeforehandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeforehandInfo) ProtoMessage() {}

func (x *BeforehandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeforehandInfo.ProtoReflect.Descriptor instead.
func (*BeforehandInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{17}
}

func (x *BeforehandInfo) GetAlreadyPicked() bool {
	if x != nil {
		return x.AlreadyPicked
	}
	return false
}

func (x *BeforehandInfo) GetShopUniqueId() int64 {
	if x != nil {
		return x.ShopUniqueId
	}
	return 0
}

func (x *BeforehandInfo) GetLastIndex() int64 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

func (x *BeforehandInfo) GetSavedIndex() int64 {
	if x != nil {
		return x.SavedIndex
	}
	return 0
}

func (x *BeforehandInfo) GetLastResults() []int64 {
	if x != nil {
		return x.LastResults
	}
	return nil
}

func (x *BeforehandInfo) GetSavedResults() []int64 {
	if x != nil {
		return x.SavedResults
	}
	return nil
}

func (x *BeforehandInfo) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type CampaignBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignBin) Reset() {
	*x = CampaignBin{}
	mi := &file_bin_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignBin) ProtoMessage() {}

func (x *CampaignBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignBin.ProtoReflect.Descriptor instead.
func (*CampaignBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{18}
}

type MailBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	YostarMail    map[int64]bool         `protobuf:"bytes,1,rep,name=yostar_mail,json=yostarMail,proto3" json:"yostar_mail,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`        // 已计入的全局邮件
	MailInfoList  map[int64]*MailInfo    `protobuf:"bytes,2,rep,name=mail_info_list,json=mailInfoList,proto3" json:"mail_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 全部邮件集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MailBin) Reset() {
	*x = MailBin{}
	mi := &file_bin_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailBin) ProtoMessage() {}

func (x *MailBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailBin.ProtoReflect.Descriptor instead.
func (*MailBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{19}
}

func (x *MailBin) GetYostarMail() map[int64]bool {
	if x != nil {
		return x.YostarMail
	}
	return nil
}

func (x *MailBin) GetMailInfoList() map[int64]*MailInfo {
	if x != nil {
		return x.MailInfoList
	}
	return nil
}

type MailInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServerId       int64                  `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                    // 唯一id
	Sender         string                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`                                         // 发件人
	Comment        string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`                                       // 内容
	SendDate       int64                  `protobuf:"varint,4,opt,name=send_date,json=sendDate,proto3" json:"send_date,omitempty"`                    // 发送时间
	ExpireDate     int64                  `protobuf:"varint,5,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`              // 到期日期
	ParcelInfoList []*ParcelInfo          `protobuf:"bytes,6,rep,name=parcel_info_list,json=parcelInfoList,proto3" json:"parcel_info_list,omitempty"` // 附件
	IsRead         bool                   `protobuf:"varint,7,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`                          // 是否领取
	ReceiptDate    int64                  `protobuf:"varint,8,opt,name=receipt_date,json=receiptDate,proto3" json:"receipt_date,omitempty"`           // 领取日期
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MailInfo) Reset() {
	*x = MailInfo{}
	mi := &file_bin_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailInfo) ProtoMessage() {}

func (x *MailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailInfo.ProtoReflect.Descriptor instead.
func (*MailInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{20}
}

func (x *MailInfo) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *MailInfo) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MailInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MailInfo) GetSendDate() int64 {
	if x != nil {
		return x.SendDate
	}
	return 0
}

func (x *MailInfo) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *MailInfo) GetParcelInfoList() []*ParcelInfo {
	if x != nil {
		return x.ParcelInfoList
	}
	return nil
}

func (x *MailInfo) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *MailInfo) GetReceiptDate() int64 {
	if x != nil {
		return x.ReceiptDate
	}
	return 0
}

type ParcelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 物品类型
	Id            int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`     // 物品id
	Num           int64                  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`   // 物品数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParcelInfo) Reset() {
	*x = ParcelInfo{}
	mi := &file_bin_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParcelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParcelInfo) ProtoMessage() {}

func (x *ParcelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParcelInfo.ProtoReflect.Descriptor instead.
func (*ParcelInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{21}
}

func (x *ParcelInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ParcelInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParcelInfo) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AttachmentBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmblemList    map[int64]*EmblemInfo  `protobuf:"bytes,1,rep,name=emblem_list,json=emblemList,proto3" json:"emblem_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 称号列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachmentBin) Reset() {
	*x = AttachmentBin{}
	mi := &file_bin_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachmentBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentBin) ProtoMessage() {}

func (x *AttachmentBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentBin.ProtoReflect.Descriptor instead.
func (*AttachmentBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{22}
}

func (x *AttachmentBin) GetEmblemList() map[int64]*EmblemInfo {
	if x != nil {
		return x.EmblemList
	}
	return nil
}

type EmblemInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmblemId      int64                  `protobuf:"varint,1,opt,name=emblem_id,json=emblemId,proto3" json:"emblem_id,omitempty"`
	ReceiveDate   int64                  `protobuf:"varint,2,opt,name=receive_date,json=receiveDate,proto3" json:"receive_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmblemInfo) Reset() {
	*x = EmblemInfo{}
	mi := &file_bin_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmblemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmblemInfo) ProtoMessage() {}

func (x *EmblemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmblemInfo.ProtoReflect.Descriptor instead.
func (*EmblemInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{23}
}

func (x *EmblemInfo) GetEmblemId() int64 {
	if x != nil {
		return x.EmblemId
	}
	return 0
}

func (x *EmblemInfo) GetReceiveDate() int64 {
	if x != nil {
		return x.ReceiveDate
	}
	return 0
}

type MomoTalkBin struct {
	state                 protoimpl.MessageState       `protogen:"open.v1"`
	FavorScheduleInfoList map[int64]*FavorScheduleInfo `protobuf:"bytes,1,rep,name=favor_schedule_info_list,json=favorScheduleInfoList,proto3" json:"favor_schedule_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 角色 MomoTalk剧情信息
	MemoryLobbyInfoList   map[int64]*MemoryLobbyInfo   `protobuf:"bytes,2,rep,name=memory_lobby_info_list,json=memoryLobbyInfoList,proto3" json:"memory_lobby_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`       // 已获取的记忆大厅
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MomoTalkBin) Reset() {
	*x = MomoTalkBin{}
	mi := &file_bin_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MomoTalkBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomoTalkBin) ProtoMessage() {}

func (x *MomoTalkBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomoTalkBin.ProtoReflect.Descriptor instead.
func (*MomoTalkBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{24}
}

func (x *MomoTalkBin) GetFavorScheduleInfoList() map[int64]*FavorScheduleInfo {
	if x != nil {
		return x.FavorScheduleInfoList
	}
	return nil
}

func (x *MomoTalkBin) GetMemoryLobbyInfoList() map[int64]*MemoryLobbyInfo {
	if x != nil {
		return x.MemoryLobbyInfoList
	}
	return nil
}

type FavorScheduleInfo struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	ScheduleGroupList map[int64]bool          `protobuf:"bytes,1,rep,name=schedule_group_list,json=scheduleGroupList,proto3" json:"schedule_group_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 已完成的MomoTalk剧情列表
	MomoTalkInfoList  map[int64]*MomoTalkInfo `protobuf:"bytes,2,rep,name=momo_talk_info_list,json=momoTalkInfoList,proto3" json:"momo_talk_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`   // 已完成的对话
	CurMessageGroupId int64                   `protobuf:"varint,3,opt,name=cur_message_group_id,json=curMessageGroupId,proto3" json:"cur_message_group_id,omitempty"`                                                                          // 当前对话
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FavorScheduleInfo) Reset() {
	*x = FavorScheduleInfo{}
	mi := &file_bin_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavorScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavorScheduleInfo) ProtoMessage() {}

func (x *FavorScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavorScheduleInfo.ProtoReflect.Descriptor instead.
func (*FavorScheduleInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{25}
}

func (x *FavorScheduleInfo) GetScheduleGroupList() map[int64]bool {
	if x != nil {
		return x.ScheduleGroupList
	}
	return nil
}

func (x *FavorScheduleInfo) GetMomoTalkInfoList() map[int64]*MomoTalkInfo {
	if x != nil {
		return x.MomoTalkInfoList
	}
	return nil
}

func (x *FavorScheduleInfo) GetCurMessageGroupId() int64 {
	if x != nil {
		return x.CurMessageGroupId
	}
	return 0
}

type MomoTalkInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MessageGroupId  int64                  `protobuf:"varint,1,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty"`
	ChosenMessageId int64                  `protobuf:"varint,2,opt,name=chosen_message_id,json=chosenMessageId,proto3" json:"chosen_message_id,omitempty"`
	ChosenDate      int64                  `protobuf:"varint,3,opt,name=chosen_date,json=chosenDate,proto3" json:"chosen_date,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MomoTalkInfo) Reset() {
	*x = MomoTalkInfo{}
	mi := &file_bin_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MomoTalkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomoTalkInfo) ProtoMessage() {}

func (x *MomoTalkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomoTalkInfo.ProtoReflect.Descriptor instead.
func (*MomoTalkInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{26}
}

func (x *MomoTalkInfo) GetMessageGroupId() int64 {
	if x != nil {
		return x.MessageGroupId
	}
	return 0
}

func (x *MomoTalkInfo) GetChosenMessageId() int64 {
	if x != nil {
		return x.ChosenMessageId
	}
	return 0
}

func (x *MomoTalkInfo) GetChosenDate() int64 {
	if x != nil {
		return x.ChosenDate
	}
	return 0
}

type MemoryLobbyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryLobbyId int64                  `protobuf:"varint,1,opt,name=memory_lobby_id,json=memoryLobbyId,proto3" json:"memory_lobby_id,omitempty"`
	ChosenDate    int64                  `protobuf:"varint,2,opt,name=chosen_date,json=chosenDate,proto3" json:"chosen_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryLobbyInfo) Reset() {
	*x = MemoryLobbyInfo{}
	mi := &file_bin_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryLobbyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryLobbyInfo) ProtoMessage() {}

func (x *MemoryLobbyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryLobbyInfo.ProtoReflect.Descriptor instead.
func (*MemoryLobbyInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{27}
}

func (x *MemoryLobbyInfo) GetMemoryLobbyId() int64 {
	if x != nil {
		return x.MemoryLobbyId
	}
	return 0
}

func (x *MemoryLobbyInfo) GetChosenDate() int64 {
	if x != nil {
		return x.ChosenDate
	}
	return 0
}

var File_bin_server_proto protoreflect.FileDescriptor

var file_bin_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x05, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x66,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x63, 0x61, 0x66,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e,
	0x5f, 0x62, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x65,
	0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x63, 0x68, 0x61, 0x42, 0x69, 0x6e, 0x52, 0x08, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x69,
	0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6d, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54,
	0x61, 0x6c, 0x6b, 0x42, 0x69, 0x6e, 0x52, 0x0b, 0x6d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b,
	0x42, 0x69, 0x6e, 0x22, 0x93, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x42, 0x69, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x66, 0x65,
	0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x66, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63,
	0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x11, 0x43,
	0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01,
	0x0a, 0x08, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x66,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x5a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x04, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x45, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e,
	0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x12, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x02,
	0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69,
	0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x65, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdb, 0x04,
	0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0d,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x1a, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x70, 0x0a, 0x21, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x18,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x71, 0x6e, 0x69, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x71, 0x6e, 0x69, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x0a, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f,
	0x6e, 0x42, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x16, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68,
	0x65, 0x6c, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x18, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5e, 0x0a, 0x18,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x1a,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3,
	0x01, 0x0a, 0x0f, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x63, 0x68, 0x65,
	0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x1a, 0x56, 0x0a, 0x14,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63,
	0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x05, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x63, 0x68, 0x65,
	0x6c, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x63,
	0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x73, 0x73, 0x49, 0x64, 0x1a, 0x44,
	0x0a, 0x16, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a,
	0x17, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x08, 0x47, 0x61, 0x63, 0x68, 0x61, 0x42, 0x69, 0x6e,
	0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x80, 0x02, 0x0a, 0x0e, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x70, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x69, 0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x3f,
	0x0a, 0x0b, 0x79, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c,
	0x42, 0x69, 0x6e, 0x2e, 0x59, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x79, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x4d, 0x61, 0x69, 0x6c, 0x12,
	0x46, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x59, 0x6f, 0x73, 0x74, 0x61,
	0x72, 0x4d, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x11, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x69,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0xa8, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69,
	0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x2e, 0x45, 0x6d, 0x62,
	0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0a, 0x45, 0x6d,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6d, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0b, 0x4d, 0x6f, 0x6d,
	0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x42, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x18, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x42, 0x69, 0x6e, 0x2e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x60, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c,
	0x6b, 0x42, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x62, 0x0a, 0x1a, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x18, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x03, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a,
	0x13, 0x6d, 0x6f, 0x6d, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x6f, 0x6d, 0x6f,
	0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x44, 0x0a,
	0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x15, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01,
	0x0a, 0x0c, 0x4d, 0x6f, 0x6d, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_proto_rawDescOnce sync.Once
	file_bin_server_proto_rawDescData = file_bin_server_proto_rawDesc
)

func file_bin_server_proto_rawDescGZIP() []byte {
	file_bin_server_proto_rawDescOnce.Do(func() {
		file_bin_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_proto_rawDescData)
	})
	return file_bin_server_proto_rawDescData
}

var file_bin_server_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_bin_server_proto_goTypes = []any{
	(*PlayerBin)(nil),                // 0: proto.PlayerBin
	(*BasePlayer)(nil),               // 1: proto.BasePlayer
	(*AcademyBin)(nil),               // 2: proto.AcademyBin
	(*CafeBin)(nil),                  // 3: proto.CafeBin
	(*CafeInfo)(nil),                 // 4: proto.CafeInfo
	(*CharacterBin)(nil),             // 5: proto.CharacterBin
	(*CharacterInfo)(nil),            // 6: proto.CharacterInfo
	(*ItemBin)(nil),                  // 7: proto.ItemBin
	(*ItemInfo)(nil),                 // 8: proto.ItemInfo
	(*CurrencyInfo)(nil),             // 9: proto.CurrencyInfo
	(*MissionBin)(nil),               // 10: proto.MissionBin
	(*ScenarioGroupHistoryInfo)(nil), // 11: proto.ScenarioGroupHistoryInfo
	(*ScenarioHistoryInfo)(nil),      // 12: proto.ScenarioHistoryInfo
	(*EchelonBin)(nil),               // 13: proto.EchelonBin
	(*EchelonTypeInfo)(nil),          // 14: proto.EchelonTypeInfo
	(*EchelonInfo)(nil),              // 15: proto.EchelonInfo
	(*GachaBin)(nil),                 // 16: proto.GachaBin
	(*BeforehandInfo)(nil),           // 17: proto.BeforehandInfo
	(*CampaignBin)(nil),              // 18: proto.CampaignBin
	(*MailBin)(nil),                  // 19: proto.MailBin
	(*MailInfo)(nil),                 // 20: proto.MailInfo
	(*ParcelInfo)(nil),               // 21: proto.ParcelInfo
	(*AttachmentBin)(nil),            // 22: proto.AttachmentBin
	(*EmblemInfo)(nil),               // 23: proto.EmblemInfo
	(*MomoTalkBin)(nil),              // 24: proto.MomoTalkBin
	(*FavorScheduleInfo)(nil),        // 25: proto.FavorScheduleInfo
	(*MomoTalkInfo)(nil),             // 26: proto.MomoTalkInfo
	(*MemoryLobbyInfo)(nil),          // 27: proto.MemoryLobbyInfo
	nil,                              // 28: proto.CafeBin.CafeInfoListEntry
	nil,                              // 29: proto.CharacterBin.CharacterInfoListEntry
	nil,                              // 30: proto.CharacterInfo.EquipmentListEntry
	nil,                              // 31: proto.ItemBin.ItemInfoListEntry
	nil,                              // 32: proto.ItemBin.CurrencyInfoListEntry
	nil,                              // 33: proto.MissionBin.TutorialListEntry
	nil,                              // 34: proto.MissionBin.ScenarioGroupHistoryInfoListEntry
	nil,                              // 35: proto.MissionBin.ScenarioHistoryInfoListEntry
	nil,                              // 36: proto.EchelonBin.EchelonTypeInfoListEntry
	nil,                              // 37: proto.EchelonBin.EchelonPresetGuidListEntry
	nil,                              // 38: proto.EchelonTypeInfo.EchelonInfoListEntry
	nil,                              // 39: proto.EchelonInfo.MainCharacterListEntry
	nil,                              // 40: proto.EchelonInfo.SupportCharacterListEntry
	nil,                              // 41: proto.EchelonInfo.SkillCharacterListEntry
	nil,                              // 42: proto.MailBin.YostarMailEntry
	nil,                              // 43: proto.MailBin.MailInfoListEntry
	nil,                              // 44: proto.AttachmentBin.EmblemListEntry
	nil,                              // 45: proto.MomoTalkBin.FavorScheduleInfoListEntry
	nil,                              // 46: proto.MomoTalkBin.MemoryLobbyInfoListEntry
	nil,                              // 47: proto.FavorScheduleInfo.ScheduleGroupListEntry
	nil,                              // 48: proto.FavorScheduleInfo.MomoTalkInfoListEntry
}
var file_bin_server_proto_depIdxs = []int32{
	1,  // 0: proto.PlayerBin.base_bin:type_name -> proto.BasePlayer
	2,  // 1: proto.PlayerBin.academy_bin:type_name -> proto.AcademyBin
	3,  // 2: proto.PlayerBin.cafe_bin:type_name -> proto.CafeBin
	19, // 3: proto.PlayerBin.mail_bin:type_name -> proto.MailBin
	5,  // 4: proto.PlayerBin.character_bin:type_name -> proto.CharacterBin
	7,  // 5: proto.PlayerBin.item_bin:type_name -> proto.ItemBin
	10, // 6: proto.PlayerBin.mission_bin:type_name -> proto.MissionBin
	13, // 7: proto.PlayerBin.echelon_bin:type_name -> proto.EchelonBin
	16, // 8: proto.PlayerBin.gacha_bin:type_name -> proto.GachaBin
	18, // 9: proto.PlayerBin.campaign_bin:type_name -> proto.CampaignBin
	22, // 10: proto.PlayerBin.attachment_bin:type_name -> proto.AttachmentBin
	24, // 11: proto.PlayerBin.momo_talk_bin:type_name -> proto.MomoTalkBin
	28, // 12: proto.CafeBin.cafe_info_list:type_name -> proto.CafeBin.CafeInfoListEntry
	29, // 13: proto.CharacterBin.character_info_list:type_name -> proto.CharacterBin.CharacterInfoListEntry
	30, // 14: proto.CharacterInfo.equipment_list:type_name -> proto.CharacterInfo.EquipmentListEntry
	31, // 15: proto.ItemBin.item_info_list:type_name -> proto.ItemBin.ItemInfoListEntry
	32, // 16: proto.ItemBin.currency_info_list:type_name -> proto.ItemBin.CurrencyInfoListEntry
	33, // 17: proto.MissionBin.tutorial_list:type_name -> proto.MissionBin.TutorialListEntry
	34, // 18: proto.MissionBin.scenario_group_history_info_list:type_name -> proto.MissionBin.ScenarioGroupHistoryInfoListEntry
	35, // 19: proto.MissionBin.scenario_history_info_list:type_name -> proto.MissionBin.ScenarioHistoryInfoListEntry
	36, // 20: proto.EchelonBin.echelon_type_info_list:type_name -> proto.EchelonBin.EchelonTypeInfoListEntry
	37, // 21: proto.EchelonBin.echelon_preset_guid_list:type_name -> proto.EchelonBin.EchelonPresetGuidListEntry
	38, // 22: proto.EchelonTypeInfo.echelon_info_list:type_name -> proto.EchelonTypeInfo.EchelonInfoListEntry
	39, // 23: proto.EchelonInfo.main_character_list:type_name -> proto.EchelonInfo.MainCharacterListEntry
	40, // 24: proto.EchelonInfo.support_character_list:type_name -> proto.EchelonInfo.SupportCharacterListEntry
	41, // 25: proto.EchelonInfo.skill_character_list:type_name -> proto.EchelonInfo.SkillCharacterListEntry
	17, // 26: proto.GachaBin.beforehand_info:type_name -> proto.BeforehandInfo
	42, // 27: proto.MailBin.yostar_mail:type_name -> proto.MailBin.YostarMailEntry
	43, // 28: proto.MailBin.mail_info_list:type_name -> proto.MailBin.MailInfoListEntry
	21, // 29: proto.MailInfo.parcel_info_list:type_name -> proto.ParcelInfo
	44, // 30: proto.AttachmentBin.emblem_list:type_name -> proto.AttachmentBin.EmblemListEntry
	45, // 31: proto.MomoTalkBin.favor_schedule_info_list:type_name -> proto.MomoTalkBin.FavorScheduleInfoListEntry
	46, // 32: proto.MomoTalkBin.memory_lobby_info_list:type_name -> proto.MomoTalkBin.MemoryLobbyInfoListEntry
	47, // 33: proto.FavorScheduleInfo.schedule_group_list:type_name -> proto.FavorScheduleInfo.ScheduleGroupListEntry
	48, // 34: proto.FavorScheduleInfo.momo_talk_info_list:type_name -> proto.FavorScheduleInfo.MomoTalkInfoListEntry
	4,  // 35: proto.CafeBin.CafeInfoListEntry.value:type_name -> proto.CafeInfo
	6,  // 36: proto.CharacterBin.CharacterInfoListEntry.value:type_name -> proto.CharacterInfo
	8,  // 37: proto.ItemBin.ItemInfoListEntry.value:type_name -> proto.ItemInfo
	9,  // 38: proto.ItemBin.CurrencyInfoListEntry.value:type_name -> proto.CurrencyInfo
	11, // 39: proto.MissionBin.ScenarioGroupHistoryInfoListEntry.value:type_name -> proto.ScenarioGroupHistoryInfo
	12, // 40: proto.MissionBin.ScenarioHistoryInfoListEntry.value:type_name -> proto.ScenarioHistoryInfo
	14, // 41: proto.EchelonBin.EchelonTypeInfoListEntry.value:type_name -> proto.EchelonTypeInfo
	14, // 42: proto.EchelonBin.EchelonPresetGuidListEntry.value:type_name -> proto.EchelonTypeInfo
	15, // 43: proto.EchelonTypeInfo.EchelonInfoListEntry.value:type_name -> proto.EchelonInfo
	20, // 44: proto.MailBin.MailInfoListEntry.value:type_name -> proto.MailInfo
	23, // 45: proto.AttachmentBin.EmblemListEntry.value:type_name -> proto.EmblemInfo
	25, // 46: proto.MomoTalkBin.FavorScheduleInfoListEntry.value:type_name -> proto.FavorScheduleInfo
	27, // 47: proto.MomoTalkBin.MemoryLobbyInfoListEntry.value:type_name -> proto.MemoryLobbyInfo
	26, // 48: proto.FavorScheduleInfo.MomoTalkInfoListEntry.value:type_name -> proto.MomoTalkInfo
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_bin_server_proto_init() }
func file_bin_server_proto_init() {
	if File_bin_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_proto_goTypes,
		DependencyIndexes: file_bin_server_proto_depIdxs,
		MessageInfos:      file_bin_server_proto_msgTypes,
	}.Build()
	File_bin_server_proto = out.File
	file_bin_server_proto_rawDesc = nil
	file_bin_server_proto_goTypes = nil
	file_bin_server_proto_depIdxs = nil
}
