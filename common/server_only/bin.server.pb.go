// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: bin.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseBin       *BasePlayer            `protobuf:"bytes,1,opt,name=base_bin,json=baseBin,proto3" json:"base_bin,omitempty"`                // 基础信息
	AcademyBin    *AcademyBin            `protobuf:"bytes,2,opt,name=academy_bin,json=academyBin,proto3" json:"academy_bin,omitempty"`       // 学院信息
	CafeBin       *CafeBin               `protobuf:"bytes,3,opt,name=cafe_bin,json=cafeBin,proto3" json:"cafe_bin,omitempty"`                // 咖啡馆信息
	CurrencyBin   *CurrencyBin           `protobuf:"bytes,4,opt,name=currency_bin,json=currencyBin,proto3" json:"currency_bin,omitempty"`    // 货币
	CharacterBin  *CharacterBin          `protobuf:"bytes,5,opt,name=character_bin,json=characterBin,proto3" json:"character_bin,omitempty"` // 角色信息
	ItemBin       *ItemBin               `protobuf:"bytes,6,opt,name=item_bin,json=itemBin,proto3" json:"item_bin,omitempty"`                // 背包物品
	MissionBin    *MissionBin            `protobuf:"bytes,7,opt,name=mission_bin,json=missionBin,proto3" json:"mission_bin,omitempty"`       // 任务信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBin) Reset() {
	*x = PlayerBin{}
	mi := &file_bin_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBin) ProtoMessage() {}

func (x *PlayerBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBin.ProtoReflect.Descriptor instead.
func (*PlayerBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerBin) GetBaseBin() *BasePlayer {
	if x != nil {
		return x.BaseBin
	}
	return nil
}

func (x *PlayerBin) GetAcademyBin() *AcademyBin {
	if x != nil {
		return x.AcademyBin
	}
	return nil
}

func (x *PlayerBin) GetCafeBin() *CafeBin {
	if x != nil {
		return x.CafeBin
	}
	return nil
}

func (x *PlayerBin) GetCurrencyBin() *CurrencyBin {
	if x != nil {
		return x.CurrencyBin
	}
	return nil
}

func (x *PlayerBin) GetCharacterBin() *CharacterBin {
	if x != nil {
		return x.CharacterBin
	}
	return nil
}

func (x *PlayerBin) GetItemBin() *ItemBin {
	if x != nil {
		return x.ItemBin
	}
	return nil
}

func (x *PlayerBin) GetMissionBin() *MissionBin {
	if x != nil {
		return x.MissionBin
	}
	return nil
}

type BasePlayer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountId       int64                  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                    // 账号id
	Level           int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                             // 账号等级
	Nickname        string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                        // 账号昵称
	CreateDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`                  // 账号创建时间
	LastConnectTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_connect_time,json=lastConnectTime,proto3" json:"last_connect_time,omitempty"` // 上次登录时间
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BasePlayer) Reset() {
	*x = BasePlayer{}
	mi := &file_bin_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePlayer) ProtoMessage() {}

func (x *BasePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePlayer.ProtoReflect.Descriptor instead.
func (*BasePlayer) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{1}
}

func (x *BasePlayer) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *BasePlayer) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BasePlayer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BasePlayer) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *BasePlayer) GetLastConnectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastConnectTime
	}
	return nil
}

type AcademyBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcademyBin) Reset() {
	*x = AcademyBin{}
	mi := &file_bin_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyBin) ProtoMessage() {}

func (x *AcademyBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyBin.ProtoReflect.Descriptor instead.
func (*AcademyBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{2}
}

type CafeBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CafeInfoList  map[int64]*CafeInfo    `protobuf:"bytes,1,rep,name=cafe_info_list,json=cafeInfoList,proto3" json:"cafe_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 咖啡馆集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CafeBin) Reset() {
	*x = CafeBin{}
	mi := &file_bin_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeBin) ProtoMessage() {}

func (x *CafeBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeBin.ProtoReflect.Descriptor instead.
func (*CafeBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{3}
}

func (x *CafeBin) GetCafeInfoList() map[int64]*CafeInfo {
	if x != nil {
		return x.CafeInfoList
	}
	return nil
}

type CafeInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CafeId                int64                  `protobuf:"varint,1,opt,name=cafe_id,json=cafeId,proto3" json:"cafe_id,omitempty"`                                                // 咖啡馆id
	LaseUpdateTime        int64                  `protobuf:"varint,2,opt,name=lase_update_time,json=laseUpdateTime,proto3" json:"lase_update_time,omitempty"`                      // 最近一次更新时间
	CafeRank              int32                  `protobuf:"varint,3,opt,name=cafe_rank,json=cafeRank,proto3" json:"cafe_rank,omitempty"`                                          // 等级
	ProductionAppliedTime int64                  `protobuf:"varint,4,opt,name=production_applied_time,json=productionAppliedTime,proto3" json:"production_applied_time,omitempty"` // 生产开始时间？
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CafeInfo) Reset() {
	*x = CafeInfo{}
	mi := &file_bin_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfo) ProtoMessage() {}

func (x *CafeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfo.ProtoReflect.Descriptor instead.
func (*CafeInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{4}
}

func (x *CafeInfo) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfo) GetLaseUpdateTime() int64 {
	if x != nil {
		return x.LaseUpdateTime
	}
	return 0
}

func (x *CafeInfo) GetCafeRank() int32 {
	if x != nil {
		return x.CafeRank
	}
	return 0
}

func (x *CafeInfo) GetProductionAppliedTime() int64 {
	if x != nil {
		return x.ProductionAppliedTime
	}
	return 0
}

type CurrencyBin struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	CurrencyInfoList map[int32]*CurrencyInfo `protobuf:"bytes,1,rep,name=Currency_info_list,json=CurrencyInfoList,proto3" json:"Currency_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CurrencyBin) Reset() {
	*x = CurrencyBin{}
	mi := &file_bin_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyBin) ProtoMessage() {}

func (x *CurrencyBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyBin.ProtoReflect.Descriptor instead.
func (*CurrencyBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyBin) GetCurrencyInfoList() map[int32]*CurrencyInfo {
	if x != nil {
		return x.CurrencyInfoList
	}
	return nil
}

type CurrencyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyId    int32                  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyNum   int64                  `protobuf:"varint,2,opt,name=currency_num,json=currencyNum,proto3" json:"currency_num,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	mi := &file_bin_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{6}
}

func (x *CurrencyInfo) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *CurrencyInfo) GetCurrencyNum() int64 {
	if x != nil {
		return x.CurrencyNum
	}
	return 0
}

func (x *CurrencyInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type CharacterBin struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	CharacterInfoList map[int64]*CharacterInfo `protobuf:"bytes,1,rep,name=character_info_list,json=characterInfoList,proto3" json:"character_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 角色数据
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CharacterBin) Reset() {
	*x = CharacterBin{}
	mi := &file_bin_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterBin) ProtoMessage() {}

func (x *CharacterBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterBin.ProtoReflect.Descriptor instead.
func (*CharacterBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{7}
}

func (x *CharacterBin) GetCharacterInfoList() map[int64]*CharacterInfo {
	if x != nil {
		return x.CharacterInfoList
	}
	return nil
}

type CharacterInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`      // 角色id
	Level                  int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                     // 等级
	Exp                    int64                  `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`                                         // 经验
	FavorRank              int32                  `protobuf:"varint,4,opt,name=favor_rank,json=favorRank,proto3" json:"favor_rank,omitempty"`            // 好感度等级
	FavorExp               int64                  `protobuf:"varint,5,opt,name=favor_exp,json=favorExp,proto3" json:"favor_exp,omitempty"`               // 好感度经验
	StarGrade              int32                  `protobuf:"varint,6,opt,name=star_grade,json=starGrade,proto3" json:"star_grade,omitempty"`            // 星级
	ExSkillLevel           int32                  `protobuf:"varint,7,opt,name=ex_skill_level,json=exSkillLevel,proto3" json:"ex_skill_level,omitempty"` // ex 技能
	PassiveSkillLevel      int32                  `protobuf:"varint,8,opt,name=passive_skillLevel,json=passiveSkillLevel,proto3" json:"passive_skillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,9,opt,name=extra_passive_skillLevel,json=extraPassiveSkillLevel,proto3" json:"extra_passive_skillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,10,opt,name=common_skill_level,json=commonSkillLevel,proto3" json:"common_skill_level,omitempty"` // 基本技能
	LeaderSkillLevel       int32                  `protobuf:"varint,11,opt,name=leader_skill_level,json=leaderSkillLevel,proto3" json:"leader_skill_level,omitempty"`
	EquipmentList          map[string]int64       `protobuf:"bytes,12,rep,name=equipment_list,json=equipmentList,proto3" json:"equipment_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 装备
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CharacterInfo) Reset() {
	*x = CharacterInfo{}
	mi := &file_bin_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterInfo) ProtoMessage() {}

func (x *CharacterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterInfo.ProtoReflect.Descriptor instead.
func (*CharacterInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{8}
}

func (x *CharacterInfo) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharacterInfo) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *CharacterInfo) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *CharacterInfo) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *CharacterInfo) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *CharacterInfo) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

func (x *CharacterInfo) GetEquipmentList() map[string]int64 {
	if x != nil {
		return x.EquipmentList
	}
	return nil
}

type ItemBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemBin) Reset() {
	*x = ItemBin{}
	mi := &file_bin_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemBin) ProtoMessage() {}

func (x *ItemBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemBin.ProtoReflect.Descriptor instead.
func (*ItemBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{9}
}

type MissionBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TutorialList  map[int64]bool         `protobuf:"bytes,1,rep,name=tutorial_list,json=tutorialList,proto3" json:"tutorial_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 已完成的教程
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissionBin) Reset() {
	*x = MissionBin{}
	mi := &file_bin_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionBin) ProtoMessage() {}

func (x *MissionBin) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionBin.ProtoReflect.Descriptor instead.
func (*MissionBin) Descriptor() ([]byte, []int) {
	return file_bin_server_proto_rawDescGZIP(), []int{10}
}

func (x *MissionBin) GetTutorialList() map[int64]bool {
	if x != nil {
		return x.TutorialList
	}
	return nil
}

var File_bin_server_proto protoreflect.FileDescriptor

var file_bin_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x02,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x42, 0x69,
	0x6e, 0x52, 0x0a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a,
	0x08, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x52,
	0x07, 0x63, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42,
	0x69, 0x6e, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x52, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x42, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x52, 0x0a, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0c, 0x0a,
	0x0a, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x42, 0x69, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x07,
	0x43, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x61, 0x66, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x42, 0x69, 0x6e, 0x2e,
	0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x63, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x50, 0x0a, 0x11, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x66, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x58,
	0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x12, 0x5a,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5a, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x04, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x78, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x0e, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x40, 0x0a, 0x12, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x09, 0x0a, 0x07, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x69, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x2e,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x3f, 0x0a, 0x11, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_proto_rawDescOnce sync.Once
	file_bin_server_proto_rawDescData = file_bin_server_proto_rawDesc
)

func file_bin_server_proto_rawDescGZIP() []byte {
	file_bin_server_proto_rawDescOnce.Do(func() {
		file_bin_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_proto_rawDescData)
	})
	return file_bin_server_proto_rawDescData
}

var file_bin_server_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bin_server_proto_goTypes = []any{
	(*PlayerBin)(nil),             // 0: proto.PlayerBin
	(*BasePlayer)(nil),            // 1: proto.BasePlayer
	(*AcademyBin)(nil),            // 2: proto.AcademyBin
	(*CafeBin)(nil),               // 3: proto.CafeBin
	(*CafeInfo)(nil),              // 4: proto.CafeInfo
	(*CurrencyBin)(nil),           // 5: proto.CurrencyBin
	(*CurrencyInfo)(nil),          // 6: proto.CurrencyInfo
	(*CharacterBin)(nil),          // 7: proto.CharacterBin
	(*CharacterInfo)(nil),         // 8: proto.CharacterInfo
	(*ItemBin)(nil),               // 9: proto.ItemBin
	(*MissionBin)(nil),            // 10: proto.MissionBin
	nil,                           // 11: proto.CafeBin.CafeInfoListEntry
	nil,                           // 12: proto.CurrencyBin.CurrencyInfoListEntry
	nil,                           // 13: proto.CharacterBin.CharacterInfoListEntry
	nil,                           // 14: proto.CharacterInfo.EquipmentListEntry
	nil,                           // 15: proto.MissionBin.TutorialListEntry
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_bin_server_proto_depIdxs = []int32{
	1,  // 0: proto.PlayerBin.base_bin:type_name -> proto.BasePlayer
	2,  // 1: proto.PlayerBin.academy_bin:type_name -> proto.AcademyBin
	3,  // 2: proto.PlayerBin.cafe_bin:type_name -> proto.CafeBin
	5,  // 3: proto.PlayerBin.currency_bin:type_name -> proto.CurrencyBin
	7,  // 4: proto.PlayerBin.character_bin:type_name -> proto.CharacterBin
	9,  // 5: proto.PlayerBin.item_bin:type_name -> proto.ItemBin
	10, // 6: proto.PlayerBin.mission_bin:type_name -> proto.MissionBin
	16, // 7: proto.BasePlayer.create_date:type_name -> google.protobuf.Timestamp
	16, // 8: proto.BasePlayer.last_connect_time:type_name -> google.protobuf.Timestamp
	11, // 9: proto.CafeBin.cafe_info_list:type_name -> proto.CafeBin.CafeInfoListEntry
	12, // 10: proto.CurrencyBin.Currency_info_list:type_name -> proto.CurrencyBin.CurrencyInfoListEntry
	13, // 11: proto.CharacterBin.character_info_list:type_name -> proto.CharacterBin.CharacterInfoListEntry
	14, // 12: proto.CharacterInfo.equipment_list:type_name -> proto.CharacterInfo.EquipmentListEntry
	15, // 13: proto.MissionBin.tutorial_list:type_name -> proto.MissionBin.TutorialListEntry
	4,  // 14: proto.CafeBin.CafeInfoListEntry.value:type_name -> proto.CafeInfo
	6,  // 15: proto.CurrencyBin.CurrencyInfoListEntry.value:type_name -> proto.CurrencyInfo
	8,  // 16: proto.CharacterBin.CharacterInfoListEntry.value:type_name -> proto.CharacterInfo
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_bin_server_proto_init() }
func file_bin_server_proto_init() {
	if File_bin_server_proto != nil {
		return
	}
	file_enum_server_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_proto_goTypes,
		DependencyIndexes: file_bin_server_proto_depIdxs,
		MessageInfos:      file_bin_server_proto_msgTypes,
	}.Build()
	File_bin_server_proto = out.File
	file_bin_server_proto_rawDesc = nil
	file_bin_server_proto_goTypes = nil
	file_bin_server_proto_depIdxs = nil
}
