// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: excel.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Excel struct {
	state                          protoimpl.MessageState            `protogen:"open.v1"`
	CafeInfoExcelTableInfo         []*CafeInfoExcelTableInfo         `protobuf:"bytes,1,rep,name=CafeInfoExcelTableInfo,proto3" json:"CafeInfoExcelTableInfo,omitempty"`                  // 咖啡馆信息
	DefaultCharacterExcelTable     []*DefaultCharacterExcelTable     `protobuf:"bytes,2,rep,name=DefaultCharacterExcelTable,proto3" json:"DefaultCharacterExcelTable,omitempty"`          // 默认角色信息
	CharacterExcelTable            []*CharacterExcelTable            `protobuf:"bytes,3,rep,name=CharacterExcelTable,proto3" json:"CharacterExcelTable,omitempty"`                        // 角色基本数据
	DefaultFurnitureExcelTable     []*DefaultFurnitureExcelTable     `protobuf:"bytes,4,rep,name=DefaultFurnitureExcelTable,proto3" json:"DefaultFurnitureExcelTable,omitempty"`          // 默认家具
	DefaultEchelonExcelTable       []*DefaultEchelonExcelTable       `protobuf:"bytes,5,rep,name=DefaultEchelonExcelTable,proto3" json:"DefaultEchelonExcelTable,omitempty"`              // 默认队伍
	ShopExcelTable                 []*ShopExcelTable                 `protobuf:"bytes,6,rep,name=ShopExcelTable,proto3" json:"ShopExcelTable,omitempty"`                                  // 商店数据
	ShopInfoExcelTable             []*ShopInfoExcelTable             `protobuf:"bytes,7,rep,name=ShopInfoExcelTable,proto3" json:"ShopInfoExcelTable,omitempty"`                          // 商店配置
	ItemExcelTable                 []*ItemExcelTable                 `protobuf:"bytes,8,rep,name=ItemExcelTable,proto3" json:"ItemExcelTable,omitempty"`                                  // 物品配置
	EmblemExcel                    []*EmblemExcel                    `protobuf:"bytes,9,rep,name=EmblemExcel,proto3" json:"EmblemExcel,omitempty"`                                        // 称号配置
	AcademyFavorScheduleExcelTable []*AcademyFavorScheduleExcelTable `protobuf:"bytes,10,rep,name=AcademyFavorScheduleExcelTable,proto3" json:"AcademyFavorScheduleExcelTable,omitempty"` // MomoTalk剧情配置
	AcademyMessangerExcelTable     []*AcademyMessangerExcelTable     `protobuf:"bytes,11,rep,name=AcademyMessangerExcelTable,proto3" json:"AcademyMessangerExcelTable,omitempty"`         // MomoTalk对话配置
	GuideMissionExcelTable         []*GuideMissionExcelTable         `protobuf:"bytes,12,rep,name=GuideMissionExcelTable,proto3" json:"GuideMissionExcelTable,omitempty"`                 // 成就配置
	ScenarioModeExcel              []*ScenarioModeExcel              `protobuf:"bytes,13,rep,name=ScenarioModeExcel,proto3" json:"ScenarioModeExcel,omitempty"`                           // 剧情配置
	ScenarioModeRewardExcel        []*ScenarioModeRewardExcel        `protobuf:"bytes,14,rep,name=ScenarioModeRewardExcel,proto3" json:"ScenarioModeRewardExcel,omitempty"`               // 剧情奖励配置
	CharacterWeaponExcelTable      []*CharacterWeaponExcelTable      `protobuf:"bytes,15,rep,name=CharacterWeaponExcelTable,proto3" json:"CharacterWeaponExcelTable,omitempty"`           // 角色武器配置
	CharacterSkillListExcelTable   []*CharacterSkillListExcelTable   `protobuf:"bytes,16,rep,name=CharacterSkillListExcelTable,proto3" json:"CharacterSkillListExcelTable,omitempty"`     // 角色技能配置表
	SkillExcelTable                []*SkillExcelTable                `protobuf:"bytes,17,rep,name=SkillExcelTable,proto3" json:"SkillExcelTable,omitempty"`                               // 全部技能配置
	RecipeIngredientExcelTable     []*RecipeIngredientExcelTable     `protobuf:"bytes,18,rep,name=RecipeIngredientExcelTable,proto3" json:"RecipeIngredientExcelTable,omitempty"`         // 技能升级材料配置
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Excel) Reset() {
	*x = Excel{}
	mi := &file_excel_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Excel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Excel) ProtoMessage() {}

func (x *Excel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Excel.ProtoReflect.Descriptor instead.
func (*Excel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{0}
}

func (x *Excel) GetCafeInfoExcelTableInfo() []*CafeInfoExcelTableInfo {
	if x != nil {
		return x.CafeInfoExcelTableInfo
	}
	return nil
}

func (x *Excel) GetDefaultCharacterExcelTable() []*DefaultCharacterExcelTable {
	if x != nil {
		return x.DefaultCharacterExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterExcelTable() []*CharacterExcelTable {
	if x != nil {
		return x.CharacterExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultFurnitureExcelTable() []*DefaultFurnitureExcelTable {
	if x != nil {
		return x.DefaultFurnitureExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultEchelonExcelTable() []*DefaultEchelonExcelTable {
	if x != nil {
		return x.DefaultEchelonExcelTable
	}
	return nil
}

func (x *Excel) GetShopExcelTable() []*ShopExcelTable {
	if x != nil {
		return x.ShopExcelTable
	}
	return nil
}

func (x *Excel) GetShopInfoExcelTable() []*ShopInfoExcelTable {
	if x != nil {
		return x.ShopInfoExcelTable
	}
	return nil
}

func (x *Excel) GetItemExcelTable() []*ItemExcelTable {
	if x != nil {
		return x.ItemExcelTable
	}
	return nil
}

func (x *Excel) GetEmblemExcel() []*EmblemExcel {
	if x != nil {
		return x.EmblemExcel
	}
	return nil
}

func (x *Excel) GetAcademyFavorScheduleExcelTable() []*AcademyFavorScheduleExcelTable {
	if x != nil {
		return x.AcademyFavorScheduleExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyMessangerExcelTable() []*AcademyMessangerExcelTable {
	if x != nil {
		return x.AcademyMessangerExcelTable
	}
	return nil
}

func (x *Excel) GetGuideMissionExcelTable() []*GuideMissionExcelTable {
	if x != nil {
		return x.GuideMissionExcelTable
	}
	return nil
}

func (x *Excel) GetScenarioModeExcel() []*ScenarioModeExcel {
	if x != nil {
		return x.ScenarioModeExcel
	}
	return nil
}

func (x *Excel) GetScenarioModeRewardExcel() []*ScenarioModeRewardExcel {
	if x != nil {
		return x.ScenarioModeRewardExcel
	}
	return nil
}

func (x *Excel) GetCharacterWeaponExcelTable() []*CharacterWeaponExcelTable {
	if x != nil {
		return x.CharacterWeaponExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterSkillListExcelTable() []*CharacterSkillListExcelTable {
	if x != nil {
		return x.CharacterSkillListExcelTable
	}
	return nil
}

func (x *Excel) GetSkillExcelTable() []*SkillExcelTable {
	if x != nil {
		return x.SkillExcelTable
	}
	return nil
}

func (x *Excel) GetRecipeIngredientExcelTable() []*RecipeIngredientExcelTable {
	if x != nil {
		return x.RecipeIngredientExcelTable
	}
	return nil
}

type CafeInfoExcelTableInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CafeId                  int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	IsDefault               bool                   `protobuf:"varint,2,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	OpenConditionCafeId     string                 `protobuf:"bytes,3,opt,name=OpenConditionCafeId,proto3" json:"OpenConditionCafeId,omitempty"`
	OpenConditionCafeInvite string                 `protobuf:"bytes,4,opt,name=OpenConditionCafeInvite,proto3" json:"OpenConditionCafeInvite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CafeInfoExcelTableInfo) Reset() {
	*x = CafeInfoExcelTableInfo{}
	mi := &file_excel_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfoExcelTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfoExcelTableInfo) ProtoMessage() {}

func (x *CafeInfoExcelTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfoExcelTableInfo.ProtoReflect.Descriptor instead.
func (*CafeInfoExcelTableInfo) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{1}
}

func (x *CafeInfoExcelTableInfo) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfoExcelTableInfo) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeId() string {
	if x != nil {
		return x.OpenConditionCafeId
	}
	return ""
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeInvite() string {
	if x != nil {
		return x.OpenConditionCafeInvite
	}
	return ""
}

type DefaultCharacterExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	FavoriteCharacter      bool                   `protobuf:"varint,2,opt,name=FavoriteCharacter,proto3" json:"FavoriteCharacter,omitempty"`
	Level                  int32                  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp                    int64                  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
	FavorExp               int64                  `protobuf:"varint,5,opt,name=FavorExp,proto3" json:"FavorExp,omitempty"`
	FavorRank              int32                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	StarGrade              int32                  `protobuf:"varint,7,opt,name=StarGrade,proto3" json:"StarGrade,omitempty"`
	ExSkillLevel           int32                  `protobuf:"varint,8,opt,name=ExSkillLevel,proto3" json:"ExSkillLevel,omitempty"`
	PassiveSkillLevel      int32                  `protobuf:"varint,9,opt,name=PassiveSkillLevel,proto3" json:"PassiveSkillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,10,opt,name=ExtraPassiveSkillLevel,proto3" json:"ExtraPassiveSkillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,11,opt,name=CommonSkillLevel,proto3" json:"CommonSkillLevel,omitempty"`
	LeaderSkillLevel       int32                  `protobuf:"varint,12,opt,name=LeaderSkillLevel,proto3" json:"LeaderSkillLevel,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DefaultCharacterExcelTable) Reset() {
	*x = DefaultCharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCharacterExcelTable) ProtoMessage() {}

func (x *DefaultCharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCharacterExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultCharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{2}
}

func (x *DefaultCharacterExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavoriteCharacter() bool {
	if x != nil {
		return x.FavoriteCharacter
	}
	return false
}

func (x *DefaultCharacterExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

type CharacterExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DevName                  string                 `protobuf:"bytes,2,opt,name=DevName,proto3" json:"DevName,omitempty"`
	CostumeGroupId           int64                  `protobuf:"varint,3,opt,name=CostumeGroupId,proto3" json:"CostumeGroupId,omitempty"`
	IsPlayable               bool                   `protobuf:"varint,4,opt,name=IsPlayable,proto3" json:"IsPlayable,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,5,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	CollectionVisible        bool                   `protobuf:"varint,6,opt,name=CollectionVisible,proto3" json:"CollectionVisible,omitempty"`
	IsPlayableCharacter      bool                   `protobuf:"varint,7,opt,name=IsPlayableCharacter,proto3" json:"IsPlayableCharacter,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,8,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,9,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	IsNPC                    bool                   `protobuf:"varint,25,opt,name=IsNPC,proto3" json:"IsNPC,omitempty"`
	DefaultStarGrade         int32                  `protobuf:"varint,10,opt,name=DefaultStarGrade,proto3" json:"DefaultStarGrade,omitempty"`
	MaxStarGrade             int32                  `protobuf:"varint,11,opt,name=MaxStarGrade,proto3" json:"MaxStarGrade,omitempty"`
	Jumpable                 bool                   `protobuf:"varint,12,opt,name=Jumpable,proto3" json:"Jumpable,omitempty"`
	PersonalityId            int32                  `protobuf:"varint,13,opt,name=PersonalityId,proto3" json:"PersonalityId,omitempty"`
	CharacterAIId            int32                  `protobuf:"varint,14,opt,name=CharacterAIId,proto3" json:"CharacterAIId,omitempty"`
	ScenarioCharacter        string                 `protobuf:"bytes,15,opt,name=ScenarioCharacter,proto3" json:"ScenarioCharacter,omitempty"`
	FavorLevelupType         int32                  `protobuf:"varint,16,opt,name=FavorLevelupType,proto3" json:"FavorLevelupType,omitempty"`
	EquipmentSlot            []string               `protobuf:"bytes,17,rep,name=EquipmentSlot,proto3" json:"EquipmentSlot,omitempty"`
	HpBarHeight              float32                `protobuf:"fixed32,18,opt,name=HpBarHeight,proto3" json:"HpBarHeight,omitempty"`
	Tags                     []string               `protobuf:"bytes,19,rep,name=Tags,proto3" json:"Tags,omitempty"`
	SecretStoneItemId        int64                  `protobuf:"varint,20,opt,name=SecretStoneItemId,proto3" json:"SecretStoneItemId,omitempty"`
	SecretStoneItemAmount    int32                  `protobuf:"varint,21,opt,name=SecretStoneItemAmount,proto3" json:"SecretStoneItemAmount,omitempty"`
	CharacterPieceItemId     int64                  `protobuf:"varint,22,opt,name=CharacterPieceItemId,proto3" json:"CharacterPieceItemId,omitempty"`
	CharacterPieceItemAmount int32                  `protobuf:"varint,23,opt,name=CharacterPieceItemAmount,proto3" json:"CharacterPieceItemAmount,omitempty"`
	CombineRecipeId          int64                  `protobuf:"varint,24,opt,name=CombineRecipeId,proto3" json:"CombineRecipeId,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CharacterExcelTable) Reset() {
	*x = CharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterExcelTable) ProtoMessage() {}

func (x *CharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{3}
}

func (x *CharacterExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterExcelTable) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *CharacterExcelTable) GetCostumeGroupId() int64 {
	if x != nil {
		return x.CostumeGroupId
	}
	return 0
}

func (x *CharacterExcelTable) GetIsPlayable() bool {
	if x != nil {
		return x.IsPlayable
	}
	return false
}

func (x *CharacterExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *CharacterExcelTable) GetCollectionVisible() bool {
	if x != nil {
		return x.CollectionVisible
	}
	return false
}

func (x *CharacterExcelTable) GetIsPlayableCharacter() bool {
	if x != nil {
		return x.IsPlayableCharacter
	}
	return false
}

func (x *CharacterExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *CharacterExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *CharacterExcelTable) GetIsNPC() bool {
	if x != nil {
		return x.IsNPC
	}
	return false
}

func (x *CharacterExcelTable) GetDefaultStarGrade() int32 {
	if x != nil {
		return x.DefaultStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetMaxStarGrade() int32 {
	if x != nil {
		return x.MaxStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetJumpable() bool {
	if x != nil {
		return x.Jumpable
	}
	return false
}

func (x *CharacterExcelTable) GetPersonalityId() int32 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterAIId() int32 {
	if x != nil {
		return x.CharacterAIId
	}
	return 0
}

func (x *CharacterExcelTable) GetScenarioCharacter() string {
	if x != nil {
		return x.ScenarioCharacter
	}
	return ""
}

func (x *CharacterExcelTable) GetFavorLevelupType() int32 {
	if x != nil {
		return x.FavorLevelupType
	}
	return 0
}

func (x *CharacterExcelTable) GetEquipmentSlot() []string {
	if x != nil {
		return x.EquipmentSlot
	}
	return nil
}

func (x *CharacterExcelTable) GetHpBarHeight() float32 {
	if x != nil {
		return x.HpBarHeight
	}
	return 0
}

func (x *CharacterExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CharacterExcelTable) GetSecretStoneItemId() int64 {
	if x != nil {
		return x.SecretStoneItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetSecretStoneItemAmount() int32 {
	if x != nil {
		return x.SecretStoneItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemId() int64 {
	if x != nil {
		return x.CharacterPieceItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemAmount() int32 {
	if x != nil {
		return x.CharacterPieceItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCombineRecipeId() int64 {
	if x != nil {
		return x.CombineRecipeId
	}
	return 0
}

type DefaultFurnitureExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PositionX     float32                `protobuf:"fixed32,2,opt,name=PositionX,proto3" json:"PositionX,omitempty"`
	PositionY     float32                `protobuf:"fixed32,3,opt,name=PositionY,proto3" json:"PositionY,omitempty"`
	Rotation      float32                `protobuf:"fixed32,4,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultFurnitureExcelTable) Reset() {
	*x = DefaultFurnitureExcelTable{}
	mi := &file_excel_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultFurnitureExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFurnitureExcelTable) ProtoMessage() {}

func (x *DefaultFurnitureExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFurnitureExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultFurnitureExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultFurnitureExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionX() float32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionY() float32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type DefaultEchelonExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EchlonId      int32                  `protobuf:"varint,1,opt,name=EchlonId,proto3" json:"EchlonId,omitempty"`
	LeaderId      int64                  `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	MainId        []int64                `protobuf:"varint,3,rep,packed,name=MainId,proto3" json:"MainId,omitempty"`
	SupportId     []int64                `protobuf:"varint,4,rep,packed,name=SupportId,proto3" json:"SupportId,omitempty"`
	TssId         int64                  `protobuf:"varint,5,opt,name=TssId,proto3" json:"TssId,omitempty"`
	SkillId       []int64                `protobuf:"varint,6,rep,packed,name=SkillId,proto3" json:"SkillId,omitempty"`
	ExtensionType int32                  `protobuf:"varint,7,opt,name=ExtensionType,proto3" json:"ExtensionType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultEchelonExcelTable) Reset() {
	*x = DefaultEchelonExcelTable{}
	mi := &file_excel_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultEchelonExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultEchelonExcelTable) ProtoMessage() {}

func (x *DefaultEchelonExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultEchelonExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultEchelonExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{5}
}

func (x *DefaultEchelonExcelTable) GetEchlonId() int32 {
	if x != nil {
		return x.EchlonId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetMainId() []int64 {
	if x != nil {
		return x.MainId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetSupportId() []int64 {
	if x != nil {
		return x.SupportId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetTssId() int64 {
	if x != nil {
		return x.TssId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetSkillId() []int64 {
	if x != nil {
		return x.SkillId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetExtensionType() int32 {
	if x != nil {
		return x.ExtensionType
	}
	return 0
}

type ShopExcelTable struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Id                           int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeEtcId                int64                  `protobuf:"varint,2,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	CategoryType                 string                 `protobuf:"bytes,3,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsLegacy                     bool                   `protobuf:"varint,4,opt,name=IsLegacy,proto3" json:"IsLegacy,omitempty"`
	GoodsId                      []int64                `protobuf:"varint,5,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	DisplayOrder                 int64                  `protobuf:"varint,6,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	SalePeriodFrom               string                 `protobuf:"bytes,7,opt,name=SalePeriodFrom,proto3" json:"SalePeriodFrom,omitempty"`
	SalePeriodTo                 string                 `protobuf:"bytes,8,opt,name=SalePeriodTo,proto3" json:"SalePeriodTo,omitempty"`
	PurchaseCooltimeMin          int64                  `protobuf:"varint,9,opt,name=PurchaseCooltimeMin,proto3" json:"PurchaseCooltimeMin,omitempty"`
	PurchaseCountLimit           int64                  `protobuf:"varint,10,opt,name=PurchaseCountLimit,proto3" json:"PurchaseCountLimit,omitempty"`
	PurchaseCountResetType_      string                 `protobuf:"bytes,11,opt,name=PurchaseCountResetType_,json=PurchaseCountResetType,proto3" json:"PurchaseCountResetType_,omitempty"`
	BuyReportEventName           string                 `protobuf:"bytes,12,opt,name=BuyReportEventName,proto3" json:"BuyReportEventName,omitempty"`
	RestrictBuyWhenInventoryFull bool                   `protobuf:"varint,13,opt,name=RestrictBuyWhenInventoryFull,proto3" json:"RestrictBuyWhenInventoryFull,omitempty"`
	DisplayTag                   string                 `protobuf:"bytes,14,opt,name=DisplayTag,proto3" json:"DisplayTag,omitempty"`
	ShopUpdateGroupId            int64                  `protobuf:"varint,15,opt,name=ShopUpdateGroupId,proto3" json:"ShopUpdateGroupId,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ShopExcelTable) Reset() {
	*x = ShopExcelTable{}
	mi := &file_excel_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopExcelTable) ProtoMessage() {}

func (x *ShopExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopExcelTable.ProtoReflect.Descriptor instead.
func (*ShopExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{6}
}

func (x *ShopExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *ShopExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopExcelTable) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *ShopExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopExcelTable) GetSalePeriodFrom() string {
	if x != nil {
		return x.SalePeriodFrom
	}
	return ""
}

func (x *ShopExcelTable) GetSalePeriodTo() string {
	if x != nil {
		return x.SalePeriodTo
	}
	return ""
}

func (x *ShopExcelTable) GetPurchaseCooltimeMin() int64 {
	if x != nil {
		return x.PurchaseCooltimeMin
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountLimit() int64 {
	if x != nil {
		return x.PurchaseCountLimit
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountResetType_() string {
	if x != nil {
		return x.PurchaseCountResetType_
	}
	return ""
}

func (x *ShopExcelTable) GetBuyReportEventName() string {
	if x != nil {
		return x.BuyReportEventName
	}
	return ""
}

func (x *ShopExcelTable) GetRestrictBuyWhenInventoryFull() bool {
	if x != nil {
		return x.RestrictBuyWhenInventoryFull
	}
	return false
}

func (x *ShopExcelTable) GetDisplayTag() string {
	if x != nil {
		return x.DisplayTag
	}
	return ""
}

func (x *ShopExcelTable) GetShopUpdateGroupId() int64 {
	if x != nil {
		return x.ShopUpdateGroupId
	}
	return 0
}

type ShopInfoExcelTable struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CategoryType          string                 `protobuf:"bytes,1,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsRefresh             bool                   `protobuf:"varint,2,opt,name=IsRefresh,proto3" json:"IsRefresh,omitempty"`
	IsSoldOutDimmed       bool                   `protobuf:"varint,3,opt,name=IsSoldOutDimmed,proto3" json:"IsSoldOutDimmed,omitempty"`
	CostParcelType        []string               `protobuf:"bytes,4,rep,name=CostParcelType,proto3" json:"CostParcelType,omitempty"`
	CostParcelId          []int64                `protobuf:"varint,5,rep,packed,name=CostParcelId,proto3" json:"CostParcelId,omitempty"`
	AutoRefreshCoolTime   int64                  `protobuf:"varint,6,opt,name=AutoRefreshCoolTime,proto3" json:"AutoRefreshCoolTime,omitempty"`
	RefreshAbleCount      int64                  `protobuf:"varint,7,opt,name=RefreshAbleCount,proto3" json:"RefreshAbleCount,omitempty"`
	GoodsId               []int64                `protobuf:"varint,8,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	OpenPeriodFrom        string                 `protobuf:"bytes,9,opt,name=OpenPeriodFrom,proto3" json:"OpenPeriodFrom,omitempty"`
	OpenPeriodTo          string                 `protobuf:"bytes,10,opt,name=OpenPeriodTo,proto3" json:"OpenPeriodTo,omitempty"`
	ShopProductUpdateTime string                 `protobuf:"bytes,11,opt,name=ShopProductUpdateTime,proto3" json:"ShopProductUpdateTime,omitempty"`
	DisplayParcelType     string                 `protobuf:"bytes,12,opt,name=DisplayParcelType,proto3" json:"DisplayParcelType,omitempty"`
	DisplayParcelId       int64                  `protobuf:"varint,13,opt,name=DisplayParcelId,proto3" json:"DisplayParcelId,omitempty"`
	IsShopVisible         bool                   `protobuf:"varint,14,opt,name=IsShopVisible,proto3" json:"IsShopVisible,omitempty"`
	DisplayOrder          int64                  `protobuf:"varint,15,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	ShopUpdateDate        int64                  `protobuf:"varint,16,opt,name=ShopUpdateDate,proto3" json:"ShopUpdateDate,omitempty"`
	ShopUpdateGroupId1    int64                  `protobuf:"varint,17,opt,name=ShopUpdateGroupId1,proto3" json:"ShopUpdateGroupId1,omitempty"`
	ShopUpdateGroupId2    int64                  `protobuf:"varint,18,opt,name=ShopUpdateGroupId2,proto3" json:"ShopUpdateGroupId2,omitempty"`
	ShopUpdateGroupId3    int64                  `protobuf:"varint,19,opt,name=ShopUpdateGroupId3,proto3" json:"ShopUpdateGroupId3,omitempty"`
	ShopUpdateGroupId4    int64                  `protobuf:"varint,20,opt,name=ShopUpdateGroupId4,proto3" json:"ShopUpdateGroupId4,omitempty"`
	ShopUpdateGroupId5    int64                  `protobuf:"varint,21,opt,name=ShopUpdateGroupId5,proto3" json:"ShopUpdateGroupId5,omitempty"`
	ShopUpdateGroupId6    int64                  `protobuf:"varint,22,opt,name=ShopUpdateGroupId6,proto3" json:"ShopUpdateGroupId6,omitempty"`
	ShopUpdateGroupId7    int64                  `protobuf:"varint,23,opt,name=ShopUpdateGroupId7,proto3" json:"ShopUpdateGroupId7,omitempty"`
	ShopUpdateGroupId8    int64                  `protobuf:"varint,24,opt,name=ShopUpdateGroupId8,proto3" json:"ShopUpdateGroupId8,omitempty"`
	ShopUpdateGroupId9    int64                  `protobuf:"varint,25,opt,name=ShopUpdateGroupId9,proto3" json:"ShopUpdateGroupId9,omitempty"`
	ShopUpdateGroupId10   int64                  `protobuf:"varint,26,opt,name=ShopUpdateGroupId10,proto3" json:"ShopUpdateGroupId10,omitempty"`
	ShopUpdateGroupId11   int64                  `protobuf:"varint,27,opt,name=ShopUpdateGroupId11,proto3" json:"ShopUpdateGroupId11,omitempty"`
	ShopUpdateGroupId12   int64                  `protobuf:"varint,28,opt,name=ShopUpdateGroupId12,proto3" json:"ShopUpdateGroupId12,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShopInfoExcelTable) Reset() {
	*x = ShopInfoExcelTable{}
	mi := &file_excel_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopInfoExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoExcelTable) ProtoMessage() {}

func (x *ShopInfoExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoExcelTable.ProtoReflect.Descriptor instead.
func (*ShopInfoExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{7}
}

func (x *ShopInfoExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetIsRefresh() bool {
	if x != nil {
		return x.IsRefresh
	}
	return false
}

func (x *ShopInfoExcelTable) GetIsSoldOutDimmed() bool {
	if x != nil {
		return x.IsSoldOutDimmed
	}
	return false
}

func (x *ShopInfoExcelTable) GetCostParcelType() []string {
	if x != nil {
		return x.CostParcelType
	}
	return nil
}

func (x *ShopInfoExcelTable) GetCostParcelId() []int64 {
	if x != nil {
		return x.CostParcelId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetAutoRefreshCoolTime() int64 {
	if x != nil {
		return x.AutoRefreshCoolTime
	}
	return 0
}

func (x *ShopInfoExcelTable) GetRefreshAbleCount() int64 {
	if x != nil {
		return x.RefreshAbleCount
	}
	return 0
}

func (x *ShopInfoExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetOpenPeriodFrom() string {
	if x != nil {
		return x.OpenPeriodFrom
	}
	return ""
}

func (x *ShopInfoExcelTable) GetOpenPeriodTo() string {
	if x != nil {
		return x.OpenPeriodTo
	}
	return ""
}

func (x *ShopInfoExcelTable) GetShopProductUpdateTime() string {
	if x != nil {
		return x.ShopProductUpdateTime
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelType() string {
	if x != nil {
		return x.DisplayParcelType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelId() int64 {
	if x != nil {
		return x.DisplayParcelId
	}
	return 0
}

func (x *ShopInfoExcelTable) GetIsShopVisible() bool {
	if x != nil {
		return x.IsShopVisible
	}
	return false
}

func (x *ShopInfoExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateDate() int64 {
	if x != nil {
		return x.ShopUpdateDate
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId1() int64 {
	if x != nil {
		return x.ShopUpdateGroupId1
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId2() int64 {
	if x != nil {
		return x.ShopUpdateGroupId2
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId3() int64 {
	if x != nil {
		return x.ShopUpdateGroupId3
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId4() int64 {
	if x != nil {
		return x.ShopUpdateGroupId4
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId5() int64 {
	if x != nil {
		return x.ShopUpdateGroupId5
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId6() int64 {
	if x != nil {
		return x.ShopUpdateGroupId6
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId7() int64 {
	if x != nil {
		return x.ShopUpdateGroupId7
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId8() int64 {
	if x != nil {
		return x.ShopUpdateGroupId8
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId9() int64 {
	if x != nil {
		return x.ShopUpdateGroupId9
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId10() int64 {
	if x != nil {
		return x.ShopUpdateGroupId10
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId11() int64 {
	if x != nil {
		return x.ShopUpdateGroupId11
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId12() int64 {
	if x != nil {
		return x.ShopUpdateGroupId12
	}
	return 0
}

type ItemExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GroupId                  int64                  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,3,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,4,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,5,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	ItemCategory_            string                 `protobuf:"bytes,6,opt,name=ItemCategory_,json=ItemCategory,proto3" json:"ItemCategory_,omitempty"`
	Quality                  int64                  `protobuf:"varint,7,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Icon                     string                 `protobuf:"bytes,8,opt,name=Icon,proto3" json:"Icon,omitempty"`
	SpriteName               string                 `protobuf:"bytes,9,opt,name=SpriteName,proto3" json:"SpriteName,omitempty"`
	StackableMax             int64                  `protobuf:"varint,10,opt,name=StackableMax,proto3" json:"StackableMax,omitempty"`
	StackableFunction        int64                  `protobuf:"varint,11,opt,name=StackableFunction,proto3" json:"StackableFunction,omitempty"`
	ImmediateUse             bool                   `protobuf:"varint,12,opt,name=ImmediateUse,proto3" json:"ImmediateUse,omitempty"`
	UsingResultParcelType    string                 `protobuf:"bytes,13,opt,name=UsingResultParcelType,proto3" json:"UsingResultParcelType,omitempty"`
	UsingResultId            int64                  `protobuf:"varint,14,opt,name=UsingResultId,proto3" json:"UsingResultId,omitempty"`
	UsingResultAmount        int64                  `protobuf:"varint,15,opt,name=UsingResultAmount,proto3" json:"UsingResultAmount,omitempty"`
	MailType_                string                 `protobuf:"bytes,16,opt,name=MailType_,json=MailType,proto3" json:"MailType_,omitempty"`
	ExpiryChangeParcelType   string                 `protobuf:"bytes,17,opt,name=ExpiryChangeParcelType,proto3" json:"ExpiryChangeParcelType,omitempty"`
	ExpiryChangeId           int64                  `protobuf:"varint,18,opt,name=ExpiryChangeId,proto3" json:"ExpiryChangeId,omitempty"`
	ExpiryChangeAmount       int64                  `protobuf:"varint,19,opt,name=ExpiryChangeAmount,proto3" json:"ExpiryChangeAmount,omitempty"`
	CanTierUpgrade           bool                   `protobuf:"varint,20,opt,name=CanTierUpgrade,proto3" json:"CanTierUpgrade,omitempty"`
	TierUpgradeRecipeCraftId int64                  `protobuf:"varint,21,opt,name=TierUpgradeRecipeCraftId,proto3" json:"TierUpgradeRecipeCraftId,omitempty"`
	Tags                     []string               `protobuf:"bytes,22,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CraftQualityTier0        int64                  `protobuf:"varint,23,opt,name=CraftQualityTier0,proto3" json:"CraftQualityTier0,omitempty"`
	CraftQualityTier1        int64                  `protobuf:"varint,24,opt,name=CraftQualityTier1,proto3" json:"CraftQualityTier1,omitempty"`
	CraftQualityTier2        int64                  `protobuf:"varint,25,opt,name=CraftQualityTier2,proto3" json:"CraftQualityTier2,omitempty"`
	ShiftingCraftQuality     int64                  `protobuf:"varint,26,opt,name=ShiftingCraftQuality,proto3" json:"ShiftingCraftQuality,omitempty"`
	MaxGiftTags              int64                  `protobuf:"varint,27,opt,name=MaxGiftTags,proto3" json:"MaxGiftTags,omitempty"`
	ShopCategory             []string               `protobuf:"bytes,28,rep,name=ShopCategory,proto3" json:"ShopCategory,omitempty"`
	ExpirationDateTime       string                 `protobuf:"bytes,29,opt,name=ExpirationDateTime,proto3" json:"ExpirationDateTime,omitempty"`
	ExpirationNotifyDateIn   int64                  `protobuf:"varint,30,opt,name=ExpirationNotifyDateIn,proto3" json:"ExpirationNotifyDateIn,omitempty"`
	ShortcutTypeId           int64                  `protobuf:"varint,31,opt,name=ShortcutTypeId,proto3" json:"ShortcutTypeId,omitempty"`
	GachaTicket              string                 `protobuf:"bytes,32,opt,name=GachaTicket,proto3" json:"GachaTicket,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ItemExcelTable) Reset() {
	*x = ItemExcelTable{}
	mi := &file_excel_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExcelTable) ProtoMessage() {}

func (x *ItemExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExcelTable.ProtoReflect.Descriptor instead.
func (*ItemExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{8}
}

func (x *ItemExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemExcelTable) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ItemExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *ItemExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *ItemExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *ItemExcelTable) GetItemCategory_() string {
	if x != nil {
		return x.ItemCategory_
	}
	return ""
}

func (x *ItemExcelTable) GetQuality() int64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ItemExcelTable) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ItemExcelTable) GetSpriteName() string {
	if x != nil {
		return x.SpriteName
	}
	return ""
}

func (x *ItemExcelTable) GetStackableMax() int64 {
	if x != nil {
		return x.StackableMax
	}
	return 0
}

func (x *ItemExcelTable) GetStackableFunction() int64 {
	if x != nil {
		return x.StackableFunction
	}
	return 0
}

func (x *ItemExcelTable) GetImmediateUse() bool {
	if x != nil {
		return x.ImmediateUse
	}
	return false
}

func (x *ItemExcelTable) GetUsingResultParcelType() string {
	if x != nil {
		return x.UsingResultParcelType
	}
	return ""
}

func (x *ItemExcelTable) GetUsingResultId() int64 {
	if x != nil {
		return x.UsingResultId
	}
	return 0
}

func (x *ItemExcelTable) GetUsingResultAmount() int64 {
	if x != nil {
		return x.UsingResultAmount
	}
	return 0
}

func (x *ItemExcelTable) GetMailType_() string {
	if x != nil {
		return x.MailType_
	}
	return ""
}

func (x *ItemExcelTable) GetExpiryChangeParcelType() string {
	if x != nil {
		return x.ExpiryChangeParcelType
	}
	return ""
}

func (x *ItemExcelTable) GetExpiryChangeId() int64 {
	if x != nil {
		return x.ExpiryChangeId
	}
	return 0
}

func (x *ItemExcelTable) GetExpiryChangeAmount() int64 {
	if x != nil {
		return x.ExpiryChangeAmount
	}
	return 0
}

func (x *ItemExcelTable) GetCanTierUpgrade() bool {
	if x != nil {
		return x.CanTierUpgrade
	}
	return false
}

func (x *ItemExcelTable) GetTierUpgradeRecipeCraftId() int64 {
	if x != nil {
		return x.TierUpgradeRecipeCraftId
	}
	return 0
}

func (x *ItemExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ItemExcelTable) GetCraftQualityTier0() int64 {
	if x != nil {
		return x.CraftQualityTier0
	}
	return 0
}

func (x *ItemExcelTable) GetCraftQualityTier1() int64 {
	if x != nil {
		return x.CraftQualityTier1
	}
	return 0
}

func (x *ItemExcelTable) GetCraftQualityTier2() int64 {
	if x != nil {
		return x.CraftQualityTier2
	}
	return 0
}

func (x *ItemExcelTable) GetShiftingCraftQuality() int64 {
	if x != nil {
		return x.ShiftingCraftQuality
	}
	return 0
}

func (x *ItemExcelTable) GetMaxGiftTags() int64 {
	if x != nil {
		return x.MaxGiftTags
	}
	return 0
}

func (x *ItemExcelTable) GetShopCategory() []string {
	if x != nil {
		return x.ShopCategory
	}
	return nil
}

func (x *ItemExcelTable) GetExpirationDateTime() string {
	if x != nil {
		return x.ExpirationDateTime
	}
	return ""
}

func (x *ItemExcelTable) GetExpirationNotifyDateIn() int64 {
	if x != nil {
		return x.ExpirationNotifyDateIn
	}
	return 0
}

func (x *ItemExcelTable) GetShortcutTypeId() int64 {
	if x != nil {
		return x.ShortcutTypeId
	}
	return 0
}

func (x *ItemExcelTable) GetGachaTicket() string {
	if x != nil {
		return x.GachaTicket
	}
	return ""
}

type EmblemExcel struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Category             string                 `protobuf:"bytes,2,opt,name=Category,proto3" json:"Category,omitempty"`
	Rarity               string                 `protobuf:"bytes,3,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	DisplayOrder         int64                  `protobuf:"varint,4,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	LocalizeEtcId        int64                  `protobuf:"varint,5,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	LocalizeCodeId       int64                  `protobuf:"varint,6,opt,name=LocalizeCodeId,proto3" json:"LocalizeCodeId,omitempty"`
	UseAtLocalizeId      int64                  `protobuf:"varint,7,opt,name=UseAtLocalizeId,proto3" json:"UseAtLocalizeId,omitempty"`
	EmblemTextVisible    bool                   `protobuf:"varint,8,opt,name=EmblemTextVisible,proto3" json:"EmblemTextVisible,omitempty"`
	IconPath             string                 `protobuf:"bytes,9,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	EmblemIconPath       string                 `protobuf:"bytes,10,opt,name=EmblemIconPath,proto3" json:"EmblemIconPath,omitempty"`
	EmblemIconNumControl int64                  `protobuf:"varint,11,opt,name=EmblemIconNumControl,proto3" json:"EmblemIconNumControl,omitempty"`
	EmblemIconBGPath     string                 `protobuf:"bytes,12,opt,name=EmblemIconBGPath,proto3" json:"EmblemIconBGPath,omitempty"`
	EmblemBGPathJp       string                 `protobuf:"bytes,13,opt,name=EmblemBGPathJp,proto3" json:"EmblemBGPathJp,omitempty"`
	EmblemBGPathKr       string                 `protobuf:"bytes,14,opt,name=EmblemBGPathKr,proto3" json:"EmblemBGPathKr,omitempty"`
	DisplayType          string                 `protobuf:"bytes,15,opt,name=DisplayType,proto3" json:"DisplayType,omitempty"`
	DisplayStartDate     string                 `protobuf:"bytes,16,opt,name=DisplayStartDate,proto3" json:"DisplayStartDate,omitempty"`
	DisplayEndDate       string                 `protobuf:"bytes,17,opt,name=DisplayEndDate,proto3" json:"DisplayEndDate,omitempty"`
	DislpayFavorLevel    int64                  `protobuf:"varint,18,opt,name=DislpayFavorLevel,proto3" json:"DislpayFavorLevel,omitempty"`
	CheckPassType        string                 `protobuf:"bytes,19,opt,name=CheckPassType,proto3" json:"CheckPassType,omitempty"`
	EmblemParameter      int64                  `protobuf:"varint,20,opt,name=EmblemParameter,proto3" json:"EmblemParameter,omitempty"`
	CheckPassCount       int64                  `protobuf:"varint,21,opt,name=CheckPassCount,proto3" json:"CheckPassCount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EmblemExcel) Reset() {
	*x = EmblemExcel{}
	mi := &file_excel_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmblemExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmblemExcel) ProtoMessage() {}

func (x *EmblemExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmblemExcel.ProtoReflect.Descriptor instead.
func (*EmblemExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{9}
}

func (x *EmblemExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmblemExcel) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EmblemExcel) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *EmblemExcel) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *EmblemExcel) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *EmblemExcel) GetLocalizeCodeId() int64 {
	if x != nil {
		return x.LocalizeCodeId
	}
	return 0
}

func (x *EmblemExcel) GetUseAtLocalizeId() int64 {
	if x != nil {
		return x.UseAtLocalizeId
	}
	return 0
}

func (x *EmblemExcel) GetEmblemTextVisible() bool {
	if x != nil {
		return x.EmblemTextVisible
	}
	return false
}

func (x *EmblemExcel) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemIconPath() string {
	if x != nil {
		return x.EmblemIconPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemIconNumControl() int64 {
	if x != nil {
		return x.EmblemIconNumControl
	}
	return 0
}

func (x *EmblemExcel) GetEmblemIconBGPath() string {
	if x != nil {
		return x.EmblemIconBGPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemBGPathJp() string {
	if x != nil {
		return x.EmblemBGPathJp
	}
	return ""
}

func (x *EmblemExcel) GetEmblemBGPathKr() string {
	if x != nil {
		return x.EmblemBGPathKr
	}
	return ""
}

func (x *EmblemExcel) GetDisplayType() string {
	if x != nil {
		return x.DisplayType
	}
	return ""
}

func (x *EmblemExcel) GetDisplayStartDate() string {
	if x != nil {
		return x.DisplayStartDate
	}
	return ""
}

func (x *EmblemExcel) GetDisplayEndDate() string {
	if x != nil {
		return x.DisplayEndDate
	}
	return ""
}

func (x *EmblemExcel) GetDislpayFavorLevel() int64 {
	if x != nil {
		return x.DislpayFavorLevel
	}
	return 0
}

func (x *EmblemExcel) GetCheckPassType() string {
	if x != nil {
		return x.CheckPassType
	}
	return ""
}

func (x *EmblemExcel) GetEmblemParameter() int64 {
	if x != nil {
		return x.EmblemParameter
	}
	return 0
}

func (x *EmblemExcel) GetCheckPassCount() int64 {
	if x != nil {
		return x.CheckPassCount
	}
	return 0
}

type AcademyFavorScheduleExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CharacterId          int64                  `protobuf:"varint,2,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	ScheduleGroupId      int64                  `protobuf:"varint,3,opt,name=ScheduleGroupId,proto3" json:"ScheduleGroupId,omitempty"`
	OrderInGroup         int64                  `protobuf:"varint,4,opt,name=OrderInGroup,proto3" json:"OrderInGroup,omitempty"`
	LocalizeScenarioId   int64                  `protobuf:"varint,5,opt,name=LocalizeScenarioId,proto3" json:"LocalizeScenarioId,omitempty"`
	FavorRank            int64                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	SecretStoneAmount    int64                  `protobuf:"varint,7,opt,name=SecretStoneAmount,proto3" json:"SecretStoneAmount,omitempty"`
	ScenarioSriptGroupId int64                  `protobuf:"varint,8,opt,name=ScenarioSriptGroupId,proto3" json:"ScenarioSriptGroupId,omitempty"`
	RewardParcelType     []string               `protobuf:"bytes,9,rep,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId       []int64                `protobuf:"varint,10,rep,packed,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardAmount         []int64                `protobuf:"varint,11,rep,packed,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AcademyFavorScheduleExcelTable) Reset() {
	*x = AcademyFavorScheduleExcelTable{}
	mi := &file_excel_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyFavorScheduleExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyFavorScheduleExcelTable) ProtoMessage() {}

func (x *AcademyFavorScheduleExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyFavorScheduleExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyFavorScheduleExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{10}
}

func (x *AcademyFavorScheduleExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetScheduleGroupId() int64 {
	if x != nil {
		return x.ScheduleGroupId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetOrderInGroup() int64 {
	if x != nil {
		return x.OrderInGroup
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetLocalizeScenarioId() int64 {
	if x != nil {
		return x.LocalizeScenarioId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetFavorRank() int64 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetSecretStoneAmount() int64 {
	if x != nil {
		return x.SecretStoneAmount
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetScenarioSriptGroupId() int64 {
	if x != nil {
		return x.ScenarioSriptGroupId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetRewardParcelType() []string {
	if x != nil {
		return x.RewardParcelType
	}
	return nil
}

func (x *AcademyFavorScheduleExcelTable) GetRewardParcelId() []int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return nil
}

func (x *AcademyFavorScheduleExcelTable) GetRewardAmount() []int64 {
	if x != nil {
		return x.RewardAmount
	}
	return nil
}

type AcademyMessangerExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	MessageGroupId              int64                  `protobuf:"varint,1,opt,name=MessageGroupId,proto3" json:"MessageGroupId,omitempty"`
	Id                          int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CharacterId                 int64                  `protobuf:"varint,3,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	MessageCondition            string                 `protobuf:"bytes,4,opt,name=MessageCondition,proto3" json:"MessageCondition,omitempty"`
	ConditionValue              int64                  `protobuf:"varint,5,opt,name=ConditionValue,proto3" json:"ConditionValue,omitempty"`
	PreConditionGroupId         int64                  `protobuf:"varint,6,opt,name=PreConditionGroupId,proto3" json:"PreConditionGroupId,omitempty"`
	PreConditionFavorScheduleId int64                  `protobuf:"varint,7,opt,name=PreConditionFavorScheduleId,proto3" json:"PreConditionFavorScheduleId,omitempty"`
	FavorScheduleId             int64                  `protobuf:"varint,8,opt,name=FavorScheduleId,proto3" json:"FavorScheduleId,omitempty"`
	NextGroupId                 int64                  `protobuf:"varint,9,opt,name=NextGroupId,proto3" json:"NextGroupId,omitempty"`
	FeedbackTimeMillisec        int64                  `protobuf:"varint,10,opt,name=FeedbackTimeMillisec,proto3" json:"FeedbackTimeMillisec,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *AcademyMessangerExcelTable) Reset() {
	*x = AcademyMessangerExcelTable{}
	mi := &file_excel_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyMessangerExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyMessangerExcelTable) ProtoMessage() {}

func (x *AcademyMessangerExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyMessangerExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyMessangerExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{11}
}

func (x *AcademyMessangerExcelTable) GetMessageGroupId() int64 {
	if x != nil {
		return x.MessageGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetMessageCondition() string {
	if x != nil {
		return x.MessageCondition
	}
	return ""
}

func (x *AcademyMessangerExcelTable) GetConditionValue() int64 {
	if x != nil {
		return x.ConditionValue
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetPreConditionGroupId() int64 {
	if x != nil {
		return x.PreConditionGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetPreConditionFavorScheduleId() int64 {
	if x != nil {
		return x.PreConditionFavorScheduleId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetFavorScheduleId() int64 {
	if x != nil {
		return x.FavorScheduleId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetNextGroupId() int64 {
	if x != nil {
		return x.NextGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetFeedbackTimeMillisec() int64 {
	if x != nil {
		return x.FeedbackTimeMillisec
	}
	return 0
}

type GuideMissionExcelTable struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	SeasonId                      int64                  `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"SeasonId,omitempty"`
	Id                            int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Category                      string                 `protobuf:"bytes,3,opt,name=Category,proto3" json:"Category,omitempty"`
	IsLegacy                      bool                   `protobuf:"varint,4,opt,name=IsLegacy,proto3" json:"IsLegacy,omitempty"`
	TabNumber                     int64                  `protobuf:"varint,5,opt,name=TabNumber,proto3" json:"TabNumber,omitempty"`
	Description                   int64                  `protobuf:"varint,6,opt,name=Description,proto3" json:"Description,omitempty"`
	ToastDisplayType              string                 `protobuf:"bytes,7,opt,name=ToastDisplayType,proto3" json:"ToastDisplayType,omitempty"`
	ToastImagePath                string                 `protobuf:"bytes,8,opt,name=ToastImagePath,proto3" json:"ToastImagePath,omitempty"`
	CompleteConditionType         string                 `protobuf:"bytes,9,opt,name=CompleteConditionType,proto3" json:"CompleteConditionType,omitempty"`
	CompleteConditionCount        int64                  `protobuf:"varint,10,opt,name=CompleteConditionCount,proto3" json:"CompleteConditionCount,omitempty"`
	CompleteConditionParameter    []int64                `protobuf:"varint,11,rep,packed,name=CompleteConditionParameter,proto3" json:"CompleteConditionParameter,omitempty"`
	CompleteConditionParameterTag []string               `protobuf:"bytes,12,rep,name=CompleteConditionParameterTag,proto3" json:"CompleteConditionParameterTag,omitempty"`
	IsAutoClearForScenario        bool                   `protobuf:"varint,13,opt,name=IsAutoClearForScenario,proto3" json:"IsAutoClearForScenario,omitempty"`
	MissionRewardParcelType       []string               `protobuf:"bytes,14,rep,name=MissionRewardParcelType,proto3" json:"MissionRewardParcelType,omitempty"`
	MissionRewardParcelId         []int64                `protobuf:"varint,15,rep,packed,name=MissionRewardParcelId,proto3" json:"MissionRewardParcelId,omitempty"`
	MissionRewardAmount           []int64                `protobuf:"varint,16,rep,packed,name=MissionRewardAmount,proto3" json:"MissionRewardAmount,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GuideMissionExcelTable) Reset() {
	*x = GuideMissionExcelTable{}
	mi := &file_excel_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuideMissionExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideMissionExcelTable) ProtoMessage() {}

func (x *GuideMissionExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideMissionExcelTable.ProtoReflect.Descriptor instead.
func (*GuideMissionExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{12}
}

func (x *GuideMissionExcelTable) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *GuideMissionExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuideMissionExcelTable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GuideMissionExcelTable) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *GuideMissionExcelTable) GetTabNumber() int64 {
	if x != nil {
		return x.TabNumber
	}
	return 0
}

func (x *GuideMissionExcelTable) GetDescription() int64 {
	if x != nil {
		return x.Description
	}
	return 0
}

func (x *GuideMissionExcelTable) GetToastDisplayType() string {
	if x != nil {
		return x.ToastDisplayType
	}
	return ""
}

func (x *GuideMissionExcelTable) GetToastImagePath() string {
	if x != nil {
		return x.ToastImagePath
	}
	return ""
}

func (x *GuideMissionExcelTable) GetCompleteConditionType() string {
	if x != nil {
		return x.CompleteConditionType
	}
	return ""
}

func (x *GuideMissionExcelTable) GetCompleteConditionCount() int64 {
	if x != nil {
		return x.CompleteConditionCount
	}
	return 0
}

func (x *GuideMissionExcelTable) GetCompleteConditionParameter() []int64 {
	if x != nil {
		return x.CompleteConditionParameter
	}
	return nil
}

func (x *GuideMissionExcelTable) GetCompleteConditionParameterTag() []string {
	if x != nil {
		return x.CompleteConditionParameterTag
	}
	return nil
}

func (x *GuideMissionExcelTable) GetIsAutoClearForScenario() bool {
	if x != nil {
		return x.IsAutoClearForScenario
	}
	return false
}

func (x *GuideMissionExcelTable) GetMissionRewardParcelType() []string {
	if x != nil {
		return x.MissionRewardParcelType
	}
	return nil
}

func (x *GuideMissionExcelTable) GetMissionRewardParcelId() []int64 {
	if x != nil {
		return x.MissionRewardParcelId
	}
	return nil
}

func (x *GuideMissionExcelTable) GetMissionRewardAmount() []int64 {
	if x != nil {
		return x.MissionRewardAmount
	}
	return nil
}

type ScenarioModeExcel struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	ModeId                     int64                  `protobuf:"varint,2,opt,name=ModeId,proto3" json:"ModeId,omitempty"`
	ModeType                   string                 `protobuf:"bytes,3,opt,name=ModeType,proto3" json:"ModeType,omitempty"`
	SubType                    string                 `protobuf:"bytes,4,opt,name=SubType,proto3" json:"SubType,omitempty"`
	VolumeId                   int64                  `protobuf:"varint,5,opt,name=VolumeId,proto3" json:"VolumeId,omitempty"`
	ChapterId                  int64                  `protobuf:"varint,6,opt,name=ChapterId,proto3" json:"ChapterId,omitempty"`
	EpisodeId                  int64                  `protobuf:"varint,7,opt,name=EpisodeId,proto3" json:"EpisodeId,omitempty"`
	ExposedTime                string                 `protobuf:"bytes,8,opt,name=ExposedTime,proto3" json:"ExposedTime,omitempty"`
	Hide                       bool                   `protobuf:"varint,9,opt,name=Hide,proto3" json:"Hide,omitempty"`
	Open                       bool                   `protobuf:"varint,10,opt,name=Open,proto3" json:"Open,omitempty"`
	IsContinue                 bool                   `protobuf:"varint,11,opt,name=IsContinue,proto3" json:"IsContinue,omitempty"`
	EpisodeContinueModeId      int64                  `protobuf:"varint,12,opt,name=EpisodeContinueModeId,proto3" json:"EpisodeContinueModeId,omitempty"`
	FrontScenarioGroupIdLength int64                  `protobuf:"varint,13,opt,name=FrontScenarioGroupIdLength,proto3" json:"FrontScenarioGroupIdLength,omitempty"`
	StrategyId                 int64                  `protobuf:"varint,14,opt,name=StrategyId,proto3" json:"StrategyId,omitempty"`
	GroundId                   int64                  `protobuf:"varint,15,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	IsDefeatBattle             bool                   `protobuf:"varint,16,opt,name=IsDefeatBattle,proto3" json:"IsDefeatBattle,omitempty"`
	BattleDuration             int64                  `protobuf:"varint,17,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	BackScenarioGroupIdLength  int64                  `protobuf:"varint,18,opt,name=BackScenarioGroupIdLength,proto3" json:"BackScenarioGroupIdLength,omitempty"`
	ClearedModeIdLength        int64                  `protobuf:"varint,19,opt,name=ClearedModeIdLength,proto3" json:"ClearedModeIdLength,omitempty"`
	ScenarioModeRewardId       int64                  `protobuf:"varint,20,opt,name=ScenarioModeRewardId,proto3" json:"ScenarioModeRewardId,omitempty"`
	IsScenarioSpecialReward    bool                   `protobuf:"varint,21,opt,name=IsScenarioSpecialReward,proto3" json:"IsScenarioSpecialReward,omitempty"`
	AccountLevelLimit          int64                  `protobuf:"varint,22,opt,name=AccountLevelLimit,proto3" json:"AccountLevelLimit,omitempty"`
	ClearedStageId             int64                  `protobuf:"varint,23,opt,name=ClearedStageId,proto3" json:"ClearedStageId,omitempty"`
	NeedClub                   string                 `protobuf:"bytes,24,opt,name=NeedClub,proto3" json:"NeedClub,omitempty"`
	NeedClubStudentCount       int64                  `protobuf:"varint,25,opt,name=NeedClubStudentCount,proto3" json:"NeedClubStudentCount,omitempty"`
	EventContentId             int64                  `protobuf:"varint,26,opt,name=EventContentId,proto3" json:"EventContentId,omitempty"`
	EventContentType           string                 `protobuf:"bytes,27,opt,name=EventContentType,proto3" json:"EventContentType,omitempty"`
	EventContentCondition      int64                  `protobuf:"varint,28,opt,name=EventContentCondition,proto3" json:"EventContentCondition,omitempty"`
	EventContentConditionGroup int64                  `protobuf:"varint,29,opt,name=EventContentConditionGroup,proto3" json:"EventContentConditionGroup,omitempty"`
	MapDifficulty              string                 `protobuf:"bytes,30,opt,name=MapDifficulty,proto3" json:"MapDifficulty,omitempty"`
	StepIndex                  int64                  `protobuf:"varint,31,opt,name=StepIndex,proto3" json:"StepIndex,omitempty"`
	RecommendLevel             int64                  `protobuf:"varint,32,opt,name=RecommendLevel,proto3" json:"RecommendLevel,omitempty"`
	EventIconParcelPath        string                 `protobuf:"bytes,33,opt,name=EventIconParcelPath,proto3" json:"EventIconParcelPath,omitempty"`
	EventBannerTitle           int64                  `protobuf:"varint,34,opt,name=EventBannerTitle,proto3" json:"EventBannerTitle,omitempty"`
	Lof                        bool                   `protobuf:"varint,35,opt,name=Lof,proto3" json:"Lof,omitempty"`
	StageTopography            string                 `protobuf:"bytes,36,opt,name=StageTopography,proto3" json:"StageTopography,omitempty"`
	FixedEchelonId             int64                  `protobuf:"varint,37,opt,name=FixedEchelonId,proto3" json:"FixedEchelonId,omitempty"`
	CompleteReportEventName    string                 `protobuf:"bytes,38,opt,name=CompleteReportEventName,proto3" json:"CompleteReportEventName,omitempty"`
	EchelonExtensionType       string                 `protobuf:"bytes,39,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	CollectionGroupId          int64                  `protobuf:"varint,40,opt,name=CollectionGroupId,proto3" json:"CollectionGroupId,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ScenarioModeExcel) Reset() {
	*x = ScenarioModeExcel{}
	mi := &file_excel_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioModeExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioModeExcel) ProtoMessage() {}

func (x *ScenarioModeExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioModeExcel.ProtoReflect.Descriptor instead.
func (*ScenarioModeExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{13}
}

func (x *ScenarioModeExcel) GetModeId() int64 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetModeType() string {
	if x != nil {
		return x.ModeType
	}
	return ""
}

func (x *ScenarioModeExcel) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *ScenarioModeExcel) GetVolumeId() int64 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ScenarioModeExcel) GetEpisodeId() int64 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetExposedTime() string {
	if x != nil {
		return x.ExposedTime
	}
	return ""
}

func (x *ScenarioModeExcel) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

func (x *ScenarioModeExcel) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *ScenarioModeExcel) GetIsContinue() bool {
	if x != nil {
		return x.IsContinue
	}
	return false
}

func (x *ScenarioModeExcel) GetEpisodeContinueModeId() int64 {
	if x != nil {
		return x.EpisodeContinueModeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetFrontScenarioGroupIdLength() int64 {
	if x != nil {
		return x.FrontScenarioGroupIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetStrategyId() int64 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *ScenarioModeExcel) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *ScenarioModeExcel) GetIsDefeatBattle() bool {
	if x != nil {
		return x.IsDefeatBattle
	}
	return false
}

func (x *ScenarioModeExcel) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *ScenarioModeExcel) GetBackScenarioGroupIdLength() int64 {
	if x != nil {
		return x.BackScenarioGroupIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetClearedModeIdLength() int64 {
	if x != nil {
		return x.ClearedModeIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetScenarioModeRewardId() int64 {
	if x != nil {
		return x.ScenarioModeRewardId
	}
	return 0
}

func (x *ScenarioModeExcel) GetIsScenarioSpecialReward() bool {
	if x != nil {
		return x.IsScenarioSpecialReward
	}
	return false
}

func (x *ScenarioModeExcel) GetAccountLevelLimit() int64 {
	if x != nil {
		return x.AccountLevelLimit
	}
	return 0
}

func (x *ScenarioModeExcel) GetClearedStageId() int64 {
	if x != nil {
		return x.ClearedStageId
	}
	return 0
}

func (x *ScenarioModeExcel) GetNeedClub() string {
	if x != nil {
		return x.NeedClub
	}
	return ""
}

func (x *ScenarioModeExcel) GetNeedClubStudentCount() int64 {
	if x != nil {
		return x.NeedClubStudentCount
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentId() int64 {
	if x != nil {
		return x.EventContentId
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentType() string {
	if x != nil {
		return x.EventContentType
	}
	return ""
}

func (x *ScenarioModeExcel) GetEventContentCondition() int64 {
	if x != nil {
		return x.EventContentCondition
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentConditionGroup() int64 {
	if x != nil {
		return x.EventContentConditionGroup
	}
	return 0
}

func (x *ScenarioModeExcel) GetMapDifficulty() string {
	if x != nil {
		return x.MapDifficulty
	}
	return ""
}

func (x *ScenarioModeExcel) GetStepIndex() int64 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

func (x *ScenarioModeExcel) GetRecommendLevel() int64 {
	if x != nil {
		return x.RecommendLevel
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventIconParcelPath() string {
	if x != nil {
		return x.EventIconParcelPath
	}
	return ""
}

func (x *ScenarioModeExcel) GetEventBannerTitle() int64 {
	if x != nil {
		return x.EventBannerTitle
	}
	return 0
}

func (x *ScenarioModeExcel) GetLof() bool {
	if x != nil {
		return x.Lof
	}
	return false
}

func (x *ScenarioModeExcel) GetStageTopography() string {
	if x != nil {
		return x.StageTopography
	}
	return ""
}

func (x *ScenarioModeExcel) GetFixedEchelonId() int64 {
	if x != nil {
		return x.FixedEchelonId
	}
	return 0
}

func (x *ScenarioModeExcel) GetCompleteReportEventName() string {
	if x != nil {
		return x.CompleteReportEventName
	}
	return ""
}

func (x *ScenarioModeExcel) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

func (x *ScenarioModeExcel) GetCollectionGroupId() int64 {
	if x != nil {
		return x.CollectionGroupId
	}
	return 0
}

type ScenarioModeRewardExcel struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ScenarioModeRewardId int64                  `protobuf:"varint,1,opt,name=ScenarioModeRewardId,proto3" json:"ScenarioModeRewardId,omitempty"`
	RewardTag            string                 `protobuf:"bytes,2,opt,name=RewardTag,proto3" json:"RewardTag,omitempty"`
	RewardProb           int64                  `protobuf:"varint,3,opt,name=RewardProb,proto3" json:"RewardProb,omitempty"`
	RewardParcelType     string                 `protobuf:"bytes,4,opt,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId       int64                  `protobuf:"varint,5,opt,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardParcelAmount   int64                  `protobuf:"varint,6,opt,name=RewardParcelAmount,proto3" json:"RewardParcelAmount,omitempty"`
	IsDisplayed          bool                   `protobuf:"varint,7,opt,name=IsDisplayed,proto3" json:"IsDisplayed,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScenarioModeRewardExcel) Reset() {
	*x = ScenarioModeRewardExcel{}
	mi := &file_excel_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioModeRewardExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioModeRewardExcel) ProtoMessage() {}

func (x *ScenarioModeRewardExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioModeRewardExcel.ProtoReflect.Descriptor instead.
func (*ScenarioModeRewardExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{14}
}

func (x *ScenarioModeRewardExcel) GetScenarioModeRewardId() int64 {
	if x != nil {
		return x.ScenarioModeRewardId
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardTag() string {
	if x != nil {
		return x.RewardTag
	}
	return ""
}

func (x *ScenarioModeRewardExcel) GetRewardProb() int64 {
	if x != nil {
		return x.RewardProb
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardParcelType() string {
	if x != nil {
		return x.RewardParcelType
	}
	return ""
}

func (x *ScenarioModeRewardExcel) GetRewardParcelId() int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardParcelAmount() int64 {
	if x != nil {
		return x.RewardParcelAmount
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetIsDisplayed() bool {
	if x != nil {
		return x.IsDisplayed
	}
	return false
}

type CharacterWeaponExcelTable struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ImagePath       string                 `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	SetRecipe       int64                  `protobuf:"varint,3,opt,name=SetRecipe,proto3" json:"SetRecipe,omitempty"`
	StatLevelUpType string                 `protobuf:"bytes,4,opt,name=StatLevelUpType,proto3" json:"StatLevelUpType,omitempty"`
	AttackPower     int64                  `protobuf:"varint,5,opt,name=AttackPower,proto3" json:"AttackPower,omitempty"`
	AttackPower100  int64                  `protobuf:"varint,6,opt,name=AttackPower100,proto3" json:"AttackPower100,omitempty"`
	MaxHP           int64                  `protobuf:"varint,7,opt,name=MaxHP,proto3" json:"MaxHP,omitempty"`
	MaxHP100        int64                  `protobuf:"varint,8,opt,name=MaxHP100,proto3" json:"MaxHP100,omitempty"`
	HealPower       int64                  `protobuf:"varint,9,opt,name=HealPower,proto3" json:"HealPower,omitempty"`
	HealPower100    int64                  `protobuf:"varint,10,opt,name=HealPower100,proto3" json:"HealPower100,omitempty"`
	Unlock          []bool                 `protobuf:"varint,11,rep,packed,name=Unlock,proto3" json:"Unlock,omitempty"`
	RecipeId        []int64                `protobuf:"varint,12,rep,packed,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	MaxLevel        []int64                `protobuf:"varint,13,rep,packed,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	LearnSkillSlot  []string               `protobuf:"bytes,14,rep,name=LearnSkillSlot,proto3" json:"LearnSkillSlot,omitempty"`
	StatType        []string               `protobuf:"bytes,15,rep,name=StatType,proto3" json:"StatType,omitempty"`
	StatValue       []int64                `protobuf:"varint,16,rep,packed,name=StatValue,proto3" json:"StatValue,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CharacterWeaponExcelTable) Reset() {
	*x = CharacterWeaponExcelTable{}
	mi := &file_excel_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterWeaponExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterWeaponExcelTable) ProtoMessage() {}

func (x *CharacterWeaponExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterWeaponExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterWeaponExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{15}
}

func (x *CharacterWeaponExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *CharacterWeaponExcelTable) GetSetRecipe() int64 {
	if x != nil {
		return x.SetRecipe
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetStatLevelUpType() string {
	if x != nil {
		return x.StatLevelUpType
	}
	return ""
}

func (x *CharacterWeaponExcelTable) GetAttackPower() int64 {
	if x != nil {
		return x.AttackPower
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetAttackPower100() int64 {
	if x != nil {
		return x.AttackPower100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetMaxHP() int64 {
	if x != nil {
		return x.MaxHP
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetMaxHP100() int64 {
	if x != nil {
		return x.MaxHP100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetHealPower() int64 {
	if x != nil {
		return x.HealPower
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetHealPower100() int64 {
	if x != nil {
		return x.HealPower100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetUnlock() []bool {
	if x != nil {
		return x.Unlock
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetRecipeId() []int64 {
	if x != nil {
		return x.RecipeId
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetMaxLevel() []int64 {
	if x != nil {
		return x.MaxLevel
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetLearnSkillSlot() []string {
	if x != nil {
		return x.LearnSkillSlot
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetStatType() []string {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetStatValue() []int64 {
	if x != nil {
		return x.StatValue
	}
	return nil
}

type CharacterSkillListExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CharacterSkillListGroupId   int64                  `protobuf:"varint,1,opt,name=CharacterSkillListGroupId,proto3" json:"CharacterSkillListGroupId,omitempty"`
	MinimumGradeCharacterWeapon int32                  `protobuf:"varint,2,opt,name=MinimumGradeCharacterWeapon,proto3" json:"MinimumGradeCharacterWeapon,omitempty"`
	MinimumTierCharacterGear    int64                  `protobuf:"varint,3,opt,name=MinimumTierCharacterGear,proto3" json:"MinimumTierCharacterGear,omitempty"`
	FormIndex                   int64                  `protobuf:"varint,4,opt,name=FormIndex,proto3" json:"FormIndex,omitempty"`
	IsRootMotion                bool                   `protobuf:"varint,5,opt,name=IsRootMotion,proto3" json:"IsRootMotion,omitempty"`
	IsMoveLeftRight             bool                   `protobuf:"varint,6,opt,name=IsMoveLeftRight,proto3" json:"IsMoveLeftRight,omitempty"`
	UseRandomExSkillTimeline    bool                   `protobuf:"varint,7,opt,name=UseRandomExSkillTimeline,proto3" json:"UseRandomExSkillTimeline,omitempty"`
	TSAInteractionId            int64                  `protobuf:"varint,8,opt,name=TSAInteractionId,proto3" json:"TSAInteractionId,omitempty"`
	NormalSkillGroupId          []string               `protobuf:"bytes,9,rep,name=NormalSkillGroupId,proto3" json:"NormalSkillGroupId,omitempty"`
	NormalSkillTimeLineIndex    []int64                `protobuf:"varint,10,rep,packed,name=NormalSkillTimeLineIndex,proto3" json:"NormalSkillTimeLineIndex,omitempty"`
	ExSkillGroupId              []string               `protobuf:"bytes,11,rep,name=ExSkillGroupId,proto3" json:"ExSkillGroupId,omitempty"`
	ExSkillCutInTimeLineIndex   []string               `protobuf:"bytes,12,rep,name=ExSkillCutInTimeLineIndex,proto3" json:"ExSkillCutInTimeLineIndex,omitempty"`
	ExSkillLevelTimeLineIndex   []string               `protobuf:"bytes,13,rep,name=ExSkillLevelTimeLineIndex,proto3" json:"ExSkillLevelTimeLineIndex,omitempty"`
	PublicSkillGroupId          []string               `protobuf:"bytes,14,rep,name=PublicSkillGroupId,proto3" json:"PublicSkillGroupId,omitempty"`
	PublicSkillTimeLineIndex    []int64                `protobuf:"varint,15,rep,packed,name=PublicSkillTimeLineIndex,proto3" json:"PublicSkillTimeLineIndex,omitempty"`
	PassiveSkillGroupId         []string               `protobuf:"bytes,16,rep,name=PassiveSkillGroupId,proto3" json:"PassiveSkillGroupId,omitempty"`
	LeaderSkillGroupId          []int64                `protobuf:"varint,17,rep,packed,name=LeaderSkillGroupId,proto3" json:"LeaderSkillGroupId,omitempty"`
	ExtraPassiveSkillGroupId    []string               `protobuf:"bytes,18,rep,name=ExtraPassiveSkillGroupId,proto3" json:"ExtraPassiveSkillGroupId,omitempty"`
	HiddenPassiveSkillGroupId   []string               `protobuf:"bytes,19,rep,name=HiddenPassiveSkillGroupId,proto3" json:"HiddenPassiveSkillGroupId,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CharacterSkillListExcelTable) Reset() {
	*x = CharacterSkillListExcelTable{}
	mi := &file_excel_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterSkillListExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterSkillListExcelTable) ProtoMessage() {}

func (x *CharacterSkillListExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterSkillListExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterSkillListExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{16}
}

func (x *CharacterSkillListExcelTable) GetCharacterSkillListGroupId() int64 {
	if x != nil {
		return x.CharacterSkillListGroupId
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetMinimumGradeCharacterWeapon() int32 {
	if x != nil {
		return x.MinimumGradeCharacterWeapon
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetMinimumTierCharacterGear() int64 {
	if x != nil {
		return x.MinimumTierCharacterGear
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetFormIndex() int64 {
	if x != nil {
		return x.FormIndex
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetIsRootMotion() bool {
	if x != nil {
		return x.IsRootMotion
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetIsMoveLeftRight() bool {
	if x != nil {
		return x.IsMoveLeftRight
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetUseRandomExSkillTimeline() bool {
	if x != nil {
		return x.UseRandomExSkillTimeline
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetTSAInteractionId() int64 {
	if x != nil {
		return x.TSAInteractionId
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetNormalSkillGroupId() []string {
	if x != nil {
		return x.NormalSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetNormalSkillTimeLineIndex() []int64 {
	if x != nil {
		return x.NormalSkillTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillGroupId() []string {
	if x != nil {
		return x.ExSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillCutInTimeLineIndex() []string {
	if x != nil {
		return x.ExSkillCutInTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillLevelTimeLineIndex() []string {
	if x != nil {
		return x.ExSkillLevelTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPublicSkillGroupId() []string {
	if x != nil {
		return x.PublicSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPublicSkillTimeLineIndex() []int64 {
	if x != nil {
		return x.PublicSkillTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPassiveSkillGroupId() []string {
	if x != nil {
		return x.PassiveSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetLeaderSkillGroupId() []int64 {
	if x != nil {
		return x.LeaderSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExtraPassiveSkillGroupId() []string {
	if x != nil {
		return x.ExtraPassiveSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetHiddenPassiveSkillGroupId() []string {
	if x != nil {
		return x.HiddenPassiveSkillGroupId
	}
	return nil
}

type SkillExcelTable struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	Id                                int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeSkillId                   int64                  `protobuf:"varint,2,opt,name=LocalizeSkillId,proto3" json:"LocalizeSkillId,omitempty"`
	GroupId                           string                 `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SkillDataKey                      string                 `protobuf:"bytes,4,opt,name=SkillDataKey,proto3" json:"SkillDataKey,omitempty"`
	VisualDataKey                     string                 `protobuf:"bytes,5,opt,name=VisualDataKey,proto3" json:"VisualDataKey,omitempty"`
	Level                             int32                  `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	SkillCost                         int64                  `protobuf:"varint,7,opt,name=SkillCost,proto3" json:"SkillCost,omitempty"`
	ExtraSkillCost                    int64                  `protobuf:"varint,8,opt,name=ExtraSkillCost,proto3" json:"ExtraSkillCost,omitempty"`
	EnemySkillCost                    int64                  `protobuf:"varint,9,opt,name=EnemySkillCost,proto3" json:"EnemySkillCost,omitempty"`
	ExtraEnemySkillCost               int64                  `protobuf:"varint,10,opt,name=ExtraEnemySkillCost,proto3" json:"ExtraEnemySkillCost,omitempty"`
	NPCSkillCost                      int64                  `protobuf:"varint,11,opt,name=NPCSkillCost,proto3" json:"NPCSkillCost,omitempty"`
	ExtraNPCSkillCost                 int64                  `protobuf:"varint,12,opt,name=ExtraNPCSkillCost,proto3" json:"ExtraNPCSkillCost,omitempty"`
	BulletType                        string                 `protobuf:"bytes,13,opt,name=BulletType,proto3" json:"BulletType,omitempty"`
	StartCoolTime                     int64                  `protobuf:"varint,14,opt,name=StartCoolTime,proto3" json:"StartCoolTime,omitempty"`
	CoolTime                          int64                  `protobuf:"varint,15,opt,name=CoolTime,proto3" json:"CoolTime,omitempty"`
	EnemyStartCoolTime                int64                  `protobuf:"varint,16,opt,name=EnemyStartCoolTime,proto3" json:"EnemyStartCoolTime,omitempty"`
	EnemyCoolTime                     int64                  `protobuf:"varint,17,opt,name=EnemyCoolTime,proto3" json:"EnemyCoolTime,omitempty"`
	NPCStartCoolTime                  int64                  `protobuf:"varint,18,opt,name=NPCStartCoolTime,proto3" json:"NPCStartCoolTime,omitempty"`
	NPCCoolTime                       int64                  `protobuf:"varint,19,opt,name=NPCCoolTime,proto3" json:"NPCCoolTime,omitempty"`
	UseAtg                            int64                  `protobuf:"varint,20,opt,name=UseAtg,proto3" json:"UseAtg,omitempty"`
	RequireCharacterLevel             int64                  `protobuf:"varint,21,opt,name=RequireCharacterLevel,proto3" json:"RequireCharacterLevel,omitempty"`
	RequireLevelUpMaterial            int64                  `protobuf:"varint,22,opt,name=RequireLevelUpMaterial,proto3" json:"RequireLevelUpMaterial,omitempty"`
	IconName                          string                 `protobuf:"bytes,23,opt,name=IconName,proto3" json:"IconName,omitempty"`
	IsShowInfo                        bool                   `protobuf:"varint,24,opt,name=IsShowInfo,proto3" json:"IsShowInfo,omitempty"`
	IsShowSpeechbubble                bool                   `protobuf:"varint,25,opt,name=IsShowSpeechbubble,proto3" json:"IsShowSpeechbubble,omitempty"`
	PublicSpeechDuration              int64                  `protobuf:"varint,26,opt,name=PublicSpeechDuration,proto3" json:"PublicSpeechDuration,omitempty"`
	AdditionalToolTipId               int64                  `protobuf:"varint,27,opt,name=AdditionalToolTipId,proto3" json:"AdditionalToolTipId,omitempty"`
	TextureSkillCardForFormConversion string                 `protobuf:"bytes,28,opt,name=TextureSkillCardForFormConversion,proto3" json:"TextureSkillCardForFormConversion,omitempty"`
	SkillCardLabelPath                string                 `protobuf:"bytes,29,opt,name=SkillCardLabelPath,proto3" json:"SkillCardLabelPath,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *SkillExcelTable) Reset() {
	*x = SkillExcelTable{}
	mi := &file_excel_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillExcelTable) ProtoMessage() {}

func (x *SkillExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillExcelTable.ProtoReflect.Descriptor instead.
func (*SkillExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{17}
}

func (x *SkillExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkillExcelTable) GetLocalizeSkillId() int64 {
	if x != nil {
		return x.LocalizeSkillId
	}
	return 0
}

func (x *SkillExcelTable) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SkillExcelTable) GetSkillDataKey() string {
	if x != nil {
		return x.SkillDataKey
	}
	return ""
}

func (x *SkillExcelTable) GetVisualDataKey() string {
	if x != nil {
		return x.VisualDataKey
	}
	return ""
}

func (x *SkillExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SkillExcelTable) GetSkillCost() int64 {
	if x != nil {
		return x.SkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraSkillCost() int64 {
	if x != nil {
		return x.ExtraSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetEnemySkillCost() int64 {
	if x != nil {
		return x.EnemySkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraEnemySkillCost() int64 {
	if x != nil {
		return x.ExtraEnemySkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetNPCSkillCost() int64 {
	if x != nil {
		return x.NPCSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraNPCSkillCost() int64 {
	if x != nil {
		return x.ExtraNPCSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetBulletType() string {
	if x != nil {
		return x.BulletType
	}
	return ""
}

func (x *SkillExcelTable) GetStartCoolTime() int64 {
	if x != nil {
		return x.StartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetCoolTime() int64 {
	if x != nil {
		return x.CoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetEnemyStartCoolTime() int64 {
	if x != nil {
		return x.EnemyStartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetEnemyCoolTime() int64 {
	if x != nil {
		return x.EnemyCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetNPCStartCoolTime() int64 {
	if x != nil {
		return x.NPCStartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetNPCCoolTime() int64 {
	if x != nil {
		return x.NPCCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetUseAtg() int64 {
	if x != nil {
		return x.UseAtg
	}
	return 0
}

func (x *SkillExcelTable) GetRequireCharacterLevel() int64 {
	if x != nil {
		return x.RequireCharacterLevel
	}
	return 0
}

func (x *SkillExcelTable) GetRequireLevelUpMaterial() int64 {
	if x != nil {
		return x.RequireLevelUpMaterial
	}
	return 0
}

func (x *SkillExcelTable) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *SkillExcelTable) GetIsShowInfo() bool {
	if x != nil {
		return x.IsShowInfo
	}
	return false
}

func (x *SkillExcelTable) GetIsShowSpeechbubble() bool {
	if x != nil {
		return x.IsShowSpeechbubble
	}
	return false
}

func (x *SkillExcelTable) GetPublicSpeechDuration() int64 {
	if x != nil {
		return x.PublicSpeechDuration
	}
	return 0
}

func (x *SkillExcelTable) GetAdditionalToolTipId() int64 {
	if x != nil {
		return x.AdditionalToolTipId
	}
	return 0
}

func (x *SkillExcelTable) GetTextureSkillCardForFormConversion() string {
	if x != nil {
		return x.TextureSkillCardForFormConversion
	}
	return ""
}

func (x *SkillExcelTable) GetSkillCardLabelPath() string {
	if x != nil {
		return x.SkillCardLabelPath
	}
	return ""
}

type RecipeIngredientExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RecipeType_          string                 `protobuf:"bytes,2,opt,name=RecipeType_,json=RecipeType,proto3" json:"RecipeType_,omitempty"`
	CostParcelType       []string               `protobuf:"bytes,3,rep,name=CostParcelType,proto3" json:"CostParcelType,omitempty"`
	CostId               []int64                `protobuf:"varint,4,rep,packed,name=CostId,proto3" json:"CostId,omitempty"`
	CostAmount           []int64                `protobuf:"varint,5,rep,packed,name=CostAmount,proto3" json:"CostAmount,omitempty"`
	IngredientParcelType []string               `protobuf:"bytes,6,rep,name=IngredientParcelType,proto3" json:"IngredientParcelType,omitempty"`
	IngredientId         []int64                `protobuf:"varint,7,rep,packed,name=IngredientId,proto3" json:"IngredientId,omitempty"`
	IngredientAmount     []int64                `protobuf:"varint,8,rep,packed,name=IngredientAmount,proto3" json:"IngredientAmount,omitempty"`
	CostTimeInSecond     int64                  `protobuf:"varint,9,opt,name=CostTimeInSecond,proto3" json:"CostTimeInSecond,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecipeIngredientExcelTable) Reset() {
	*x = RecipeIngredientExcelTable{}
	mi := &file_excel_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeIngredientExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIngredientExcelTable) ProtoMessage() {}

func (x *RecipeIngredientExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIngredientExcelTable.ProtoReflect.Descriptor instead.
func (*RecipeIngredientExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{18}
}

func (x *RecipeIngredientExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecipeIngredientExcelTable) GetRecipeType_() string {
	if x != nil {
		return x.RecipeType_
	}
	return ""
}

func (x *RecipeIngredientExcelTable) GetCostParcelType() []string {
	if x != nil {
		return x.CostParcelType
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostId() []int64 {
	if x != nil {
		return x.CostId
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostAmount() []int64 {
	if x != nil {
		return x.CostAmount
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientParcelType() []string {
	if x != nil {
		return x.IngredientParcelType
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientId() []int64 {
	if x != nil {
		return x.IngredientId
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientAmount() []int64 {
	if x != nil {
		return x.IngredientAmount
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostTimeInSecond() int64 {
	if x != nil {
		return x.CostTimeInSecond
	}
	return 0
}

var File_excel_server_proto protoreflect.FileDescriptor

var file_excel_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x0c, 0x0a, 0x05,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1a,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a,
	0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65,
	0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52,
	0x0b, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x1e,
	0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1e, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x1a, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55,
	0x0a, 0x16, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x16, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x11, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x58, 0x0a,
	0x17, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x17,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x19, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xd1, 0x07, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65,
	0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43,
	0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43, 0x12, 0x2a, 0x0a, 0x10, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d,
	0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4a,
	0x75, 0x6d, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4a,
	0x75, 0x6d, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41,
	0x49, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x63, 0x68, 0x6c, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x63, 0x68, 0x6c, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x0e,
	0x53, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45,
	0x74, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x61, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x30,
	0x0a, 0x13, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x37, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x75, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68, 0x65, 0x6e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd6, 0x09, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x4f, 0x75,
	0x74, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49,
	0x73, 0x53, 0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x34,
	0x0a, 0x15, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53,
	0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x33, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x33, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x34, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x35, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x36, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x36, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x37, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x38, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x38, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x39, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x31, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x68, 0x6f,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x30,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53,
	0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x31, 0x31, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x31, 0x32, 0x22, 0xf0, 0x09, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45,
	0x74, 0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x65, 0x72, 0x30, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x30, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x65, 0x72, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65,
	0x72, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x32, 0x0a, 0x14, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x61, 0x63, 0x68,
	0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x41, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x41, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6d, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x63, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x47, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x63, 0x6f, 0x6e, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62,
	0x6c, 0x65, 0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4a, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4a,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42, 0x47, 0x50, 0x61, 0x74,
	0x68, 0x4b, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x6c, 0x70, 0x61, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x44, 0x69, 0x73, 0x6c,
	0x70, 0x61, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x6d,
	0x62, 0x6c, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x1e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x72, 0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x72, 0x69, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbe, 0x03, 0x0a, 0x1a, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x50, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x22, 0xde, 0x05, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x61, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x12, 0x38, 0x0a, 0x17, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbd, 0x0c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x48, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x1a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73,
	0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x42, 0x61,
	0x63, 0x6b, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x42,
	0x61, 0x63, 0x6b, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x49, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x49, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65,
	0x65, 0x64, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c,
	0x75, 0x62, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4d, 0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x4c, 0x6f, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x45, 0x63, 0x68,
	0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62,
	0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x81, 0x04, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x31, 0x30, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x48, 0x50, 0x31, 0x30, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61,
	0x78, 0x48, 0x50, 0x31, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x48, 0x65, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x31, 0x30, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x08, 0x0a, 0x1c, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x47, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x47, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x6d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x4d,
	0x6f, 0x76, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x53, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x53, 0x41, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x75, 0x74, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x75, 0x74, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a,
	0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x93, 0x09, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e,
	0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x4e, 0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x4e, 0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6f,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x50, 0x43, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x4e, 0x50, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x50, 0x43, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x50, 0x43, 0x43, 0x6f, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x41, 0x74, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x41, 0x74, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x49, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x6f, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0xdd, 0x02, 0x0a, 0x1a, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x73,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_excel_server_proto_rawDescOnce sync.Once
	file_excel_server_proto_rawDescData = file_excel_server_proto_rawDesc
)

func file_excel_server_proto_rawDescGZIP() []byte {
	file_excel_server_proto_rawDescOnce.Do(func() {
		file_excel_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_excel_server_proto_rawDescData)
	})
	return file_excel_server_proto_rawDescData
}

var file_excel_server_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_excel_server_proto_goTypes = []any{
	(*Excel)(nil),                          // 0: proto.Excel
	(*CafeInfoExcelTableInfo)(nil),         // 1: proto.CafeInfoExcelTableInfo
	(*DefaultCharacterExcelTable)(nil),     // 2: proto.DefaultCharacterExcelTable
	(*CharacterExcelTable)(nil),            // 3: proto.CharacterExcelTable
	(*DefaultFurnitureExcelTable)(nil),     // 4: proto.DefaultFurnitureExcelTable
	(*DefaultEchelonExcelTable)(nil),       // 5: proto.DefaultEchelonExcelTable
	(*ShopExcelTable)(nil),                 // 6: proto.ShopExcelTable
	(*ShopInfoExcelTable)(nil),             // 7: proto.ShopInfoExcelTable
	(*ItemExcelTable)(nil),                 // 8: proto.ItemExcelTable
	(*EmblemExcel)(nil),                    // 9: proto.EmblemExcel
	(*AcademyFavorScheduleExcelTable)(nil), // 10: proto.AcademyFavorScheduleExcelTable
	(*AcademyMessangerExcelTable)(nil),     // 11: proto.AcademyMessangerExcelTable
	(*GuideMissionExcelTable)(nil),         // 12: proto.GuideMissionExcelTable
	(*ScenarioModeExcel)(nil),              // 13: proto.ScenarioModeExcel
	(*ScenarioModeRewardExcel)(nil),        // 14: proto.ScenarioModeRewardExcel
	(*CharacterWeaponExcelTable)(nil),      // 15: proto.CharacterWeaponExcelTable
	(*CharacterSkillListExcelTable)(nil),   // 16: proto.CharacterSkillListExcelTable
	(*SkillExcelTable)(nil),                // 17: proto.SkillExcelTable
	(*RecipeIngredientExcelTable)(nil),     // 18: proto.RecipeIngredientExcelTable
}
var file_excel_server_proto_depIdxs = []int32{
	1,  // 0: proto.Excel.CafeInfoExcelTableInfo:type_name -> proto.CafeInfoExcelTableInfo
	2,  // 1: proto.Excel.DefaultCharacterExcelTable:type_name -> proto.DefaultCharacterExcelTable
	3,  // 2: proto.Excel.CharacterExcelTable:type_name -> proto.CharacterExcelTable
	4,  // 3: proto.Excel.DefaultFurnitureExcelTable:type_name -> proto.DefaultFurnitureExcelTable
	5,  // 4: proto.Excel.DefaultEchelonExcelTable:type_name -> proto.DefaultEchelonExcelTable
	6,  // 5: proto.Excel.ShopExcelTable:type_name -> proto.ShopExcelTable
	7,  // 6: proto.Excel.ShopInfoExcelTable:type_name -> proto.ShopInfoExcelTable
	8,  // 7: proto.Excel.ItemExcelTable:type_name -> proto.ItemExcelTable
	9,  // 8: proto.Excel.EmblemExcel:type_name -> proto.EmblemExcel
	10, // 9: proto.Excel.AcademyFavorScheduleExcelTable:type_name -> proto.AcademyFavorScheduleExcelTable
	11, // 10: proto.Excel.AcademyMessangerExcelTable:type_name -> proto.AcademyMessangerExcelTable
	12, // 11: proto.Excel.GuideMissionExcelTable:type_name -> proto.GuideMissionExcelTable
	13, // 12: proto.Excel.ScenarioModeExcel:type_name -> proto.ScenarioModeExcel
	14, // 13: proto.Excel.ScenarioModeRewardExcel:type_name -> proto.ScenarioModeRewardExcel
	15, // 14: proto.Excel.CharacterWeaponExcelTable:type_name -> proto.CharacterWeaponExcelTable
	16, // 15: proto.Excel.CharacterSkillListExcelTable:type_name -> proto.CharacterSkillListExcelTable
	17, // 16: proto.Excel.SkillExcelTable:type_name -> proto.SkillExcelTable
	18, // 17: proto.Excel.RecipeIngredientExcelTable:type_name -> proto.RecipeIngredientExcelTable
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_excel_server_proto_init() }
func file_excel_server_proto_init() {
	if File_excel_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_excel_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_excel_server_proto_goTypes,
		DependencyIndexes: file_excel_server_proto_depIdxs,
		MessageInfos:      file_excel_server_proto_msgTypes,
	}.Build()
	File_excel_server_proto = out.File
	file_excel_server_proto_rawDesc = nil
	file_excel_server_proto_goTypes = nil
	file_excel_server_proto_depIdxs = nil
}
