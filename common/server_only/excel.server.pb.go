// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: excel.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Excel struct {
	state                      protoimpl.MessageState      `protogen:"open.v1"`
	CafeInfoExcelTableInfo     *CafeInfoExcelTableInfo     `protobuf:"bytes,1,opt,name=CafeInfoExcelTableInfo,proto3" json:"CafeInfoExcelTableInfo,omitempty"`         // 咖啡馆信息
	DefaultCharacterExcelTable *DefaultCharacterExcelTable `protobuf:"bytes,2,opt,name=DefaultCharacterExcelTable,proto3" json:"DefaultCharacterExcelTable,omitempty"` // 默认角色信息
	CharacterExcelTable        *CharacterExcelTable        `protobuf:"bytes,3,opt,name=CharacterExcelTable,proto3" json:"CharacterExcelTable,omitempty"`               // 角色基本数据
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Excel) Reset() {
	*x = Excel{}
	mi := &file_excel_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Excel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Excel) ProtoMessage() {}

func (x *Excel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Excel.ProtoReflect.Descriptor instead.
func (*Excel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{0}
}

func (x *Excel) GetCafeInfoExcelTableInfo() *CafeInfoExcelTableInfo {
	if x != nil {
		return x.CafeInfoExcelTableInfo
	}
	return nil
}

func (x *Excel) GetDefaultCharacterExcelTable() *DefaultCharacterExcelTable {
	if x != nil {
		return x.DefaultCharacterExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterExcelTable() *CharacterExcelTable {
	if x != nil {
		return x.CharacterExcelTable
	}
	return nil
}

type CafeInfoExcelTableInfo struct {
	state                  protoimpl.MessageState        `protogen:"open.v1"`
	OrigCafeInfoExcelTable []*CafeInfoExcelTable         `protobuf:"bytes,1,rep,name=OrigCafeInfoExcelTable,proto3" json:"OrigCafeInfoExcelTable,omitempty"`
	CafeInfoExcelTables    map[int64]*CafeInfoExcelTable `protobuf:"bytes,2,rep,name=CafeInfoExcelTables,proto3" json:"CafeInfoExcelTables,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CafeInfoExcelTableInfo) Reset() {
	*x = CafeInfoExcelTableInfo{}
	mi := &file_excel_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfoExcelTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfoExcelTableInfo) ProtoMessage() {}

func (x *CafeInfoExcelTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfoExcelTableInfo.ProtoReflect.Descriptor instead.
func (*CafeInfoExcelTableInfo) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{1}
}

func (x *CafeInfoExcelTableInfo) GetOrigCafeInfoExcelTable() []*CafeInfoExcelTable {
	if x != nil {
		return x.OrigCafeInfoExcelTable
	}
	return nil
}

func (x *CafeInfoExcelTableInfo) GetCafeInfoExcelTables() map[int64]*CafeInfoExcelTable {
	if x != nil {
		return x.CafeInfoExcelTables
	}
	return nil
}

type CafeInfoExcelTable struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CafeId                  int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	IsDefault               bool                   `protobuf:"varint,2,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	OpenConditionCafeId     string                 `protobuf:"bytes,3,opt,name=OpenConditionCafeId,proto3" json:"OpenConditionCafeId,omitempty"`
	OpenConditionCafeInvite string                 `protobuf:"bytes,4,opt,name=OpenConditionCafeInvite,proto3" json:"OpenConditionCafeInvite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CafeInfoExcelTable) Reset() {
	*x = CafeInfoExcelTable{}
	mi := &file_excel_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfoExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfoExcelTable) ProtoMessage() {}

func (x *CafeInfoExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfoExcelTable.ProtoReflect.Descriptor instead.
func (*CafeInfoExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{2}
}

func (x *CafeInfoExcelTable) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfoExcelTable) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CafeInfoExcelTable) GetOpenConditionCafeId() string {
	if x != nil {
		return x.OpenConditionCafeId
	}
	return ""
}

func (x *CafeInfoExcelTable) GetOpenConditionCafeInvite() string {
	if x != nil {
		return x.OpenConditionCafeInvite
	}
	return ""
}

type DefaultCharacterExcelTable struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	OrigCharacterExcelTable []*DefaultCharacterExcel `protobuf:"bytes,1,rep,name=OrigCharacterExcelTable,proto3" json:"OrigCharacterExcelTable,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DefaultCharacterExcelTable) Reset() {
	*x = DefaultCharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCharacterExcelTable) ProtoMessage() {}

func (x *DefaultCharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCharacterExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultCharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{3}
}

func (x *DefaultCharacterExcelTable) GetOrigCharacterExcelTable() []*DefaultCharacterExcel {
	if x != nil {
		return x.OrigCharacterExcelTable
	}
	return nil
}

type DefaultCharacterExcel struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	FavoriteCharacter      bool                   `protobuf:"varint,2,opt,name=FavoriteCharacter,proto3" json:"FavoriteCharacter,omitempty"`
	Level                  int32                  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp                    int64                  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
	FavorExp               int64                  `protobuf:"varint,5,opt,name=FavorExp,proto3" json:"FavorExp,omitempty"`
	FavorRank              int32                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	StarGrade              int32                  `protobuf:"varint,7,opt,name=StarGrade,proto3" json:"StarGrade,omitempty"`
	ExSkillLevel           int32                  `protobuf:"varint,8,opt,name=ExSkillLevel,proto3" json:"ExSkillLevel,omitempty"`
	PassiveSkillLevel      int32                  `protobuf:"varint,9,opt,name=PassiveSkillLevel,proto3" json:"PassiveSkillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,10,opt,name=ExtraPassiveSkillLevel,proto3" json:"ExtraPassiveSkillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,11,opt,name=CommonSkillLevel,proto3" json:"CommonSkillLevel,omitempty"`
	LeaderSkillLevel       int32                  `protobuf:"varint,12,opt,name=LeaderSkillLevel,proto3" json:"LeaderSkillLevel,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DefaultCharacterExcel) Reset() {
	*x = DefaultCharacterExcel{}
	mi := &file_excel_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCharacterExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCharacterExcel) ProtoMessage() {}

func (x *DefaultCharacterExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCharacterExcel.ProtoReflect.Descriptor instead.
func (*DefaultCharacterExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultCharacterExcel) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *DefaultCharacterExcel) GetFavoriteCharacter() bool {
	if x != nil {
		return x.FavoriteCharacter
	}
	return false
}

func (x *DefaultCharacterExcel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DefaultCharacterExcel) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *DefaultCharacterExcel) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *DefaultCharacterExcel) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *DefaultCharacterExcel) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *DefaultCharacterExcel) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcel) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcel) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcel) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcel) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

type CharacterExcelTable struct {
	state                   protoimpl.MessageState    `protogen:"open.v1"`
	OrigCharacterExcelTable []*CharacterExcel         `protobuf:"bytes,1,rep,name=OrigCharacterExcelTable,proto3" json:"OrigCharacterExcelTable,omitempty"`
	CharacterExcelMap       map[int64]*CharacterExcel `protobuf:"bytes,2,rep,name=CharacterExcelMap,proto3" json:"CharacterExcelMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CharacterExcelTable) Reset() {
	*x = CharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterExcelTable) ProtoMessage() {}

func (x *CharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{5}
}

func (x *CharacterExcelTable) GetOrigCharacterExcelTable() []*CharacterExcel {
	if x != nil {
		return x.OrigCharacterExcelTable
	}
	return nil
}

func (x *CharacterExcelTable) GetCharacterExcelMap() map[int64]*CharacterExcel {
	if x != nil {
		return x.CharacterExcelMap
	}
	return nil
}

type CharacterExcel struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DevName                  string                 `protobuf:"bytes,2,opt,name=DevName,proto3" json:"DevName,omitempty"`
	CostumeGroupId           int64                  `protobuf:"varint,3,opt,name=CostumeGroupId,proto3" json:"CostumeGroupId,omitempty"`
	IsPlayable               bool                   `protobuf:"varint,4,opt,name=IsPlayable,proto3" json:"IsPlayable,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,5,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	CollectionVisible        bool                   `protobuf:"varint,6,opt,name=CollectionVisible,proto3" json:"CollectionVisible,omitempty"`
	IsPlayableCharacter      bool                   `protobuf:"varint,7,opt,name=IsPlayableCharacter,proto3" json:"IsPlayableCharacter,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,8,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,9,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	DefaultStarGrade         int32                  `protobuf:"varint,10,opt,name=DefaultStarGrade,proto3" json:"DefaultStarGrade,omitempty"`
	MaxStarGrade             int32                  `protobuf:"varint,11,opt,name=MaxStarGrade,proto3" json:"MaxStarGrade,omitempty"`
	Jumpable                 bool                   `protobuf:"varint,12,opt,name=Jumpable,proto3" json:"Jumpable,omitempty"`
	PersonalityId            int32                  `protobuf:"varint,13,opt,name=PersonalityId,proto3" json:"PersonalityId,omitempty"`
	CharacterAIId            int32                  `protobuf:"varint,14,opt,name=CharacterAIId,proto3" json:"CharacterAIId,omitempty"`
	ScenarioCharacter        string                 `protobuf:"bytes,15,opt,name=ScenarioCharacter,proto3" json:"ScenarioCharacter,omitempty"`
	FavorLevelupType         int32                  `protobuf:"varint,16,opt,name=FavorLevelupType,proto3" json:"FavorLevelupType,omitempty"`
	EquipmentSlot            []string               `protobuf:"bytes,17,rep,name=EquipmentSlot,proto3" json:"EquipmentSlot,omitempty"`
	HpBarHeight              float32                `protobuf:"fixed32,18,opt,name=HpBarHeight,proto3" json:"HpBarHeight,omitempty"`
	Tags                     []string               `protobuf:"bytes,19,rep,name=Tags,proto3" json:"Tags,omitempty"`
	SecretStoneItemId        int32                  `protobuf:"varint,20,opt,name=SecretStoneItemId,proto3" json:"SecretStoneItemId,omitempty"`
	SecretStoneItemAmount    int32                  `protobuf:"varint,21,opt,name=SecretStoneItemAmount,proto3" json:"SecretStoneItemAmount,omitempty"`
	CharacterPieceItemId     int32                  `protobuf:"varint,22,opt,name=CharacterPieceItemId,proto3" json:"CharacterPieceItemId,omitempty"`
	CharacterPieceItemAmount int32                  `protobuf:"varint,23,opt,name=CharacterPieceItemAmount,proto3" json:"CharacterPieceItemAmount,omitempty"`
	CombineRecipeId          int32                  `protobuf:"varint,24,opt,name=CombineRecipeId,proto3" json:"CombineRecipeId,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CharacterExcel) Reset() {
	*x = CharacterExcel{}
	mi := &file_excel_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterExcel) ProtoMessage() {}

func (x *CharacterExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterExcel.ProtoReflect.Descriptor instead.
func (*CharacterExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{6}
}

func (x *CharacterExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterExcel) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *CharacterExcel) GetCostumeGroupId() int64 {
	if x != nil {
		return x.CostumeGroupId
	}
	return 0
}

func (x *CharacterExcel) GetIsPlayable() bool {
	if x != nil {
		return x.IsPlayable
	}
	return false
}

func (x *CharacterExcel) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *CharacterExcel) GetCollectionVisible() bool {
	if x != nil {
		return x.CollectionVisible
	}
	return false
}

func (x *CharacterExcel) GetIsPlayableCharacter() bool {
	if x != nil {
		return x.IsPlayableCharacter
	}
	return false
}

func (x *CharacterExcel) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *CharacterExcel) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *CharacterExcel) GetDefaultStarGrade() int32 {
	if x != nil {
		return x.DefaultStarGrade
	}
	return 0
}

func (x *CharacterExcel) GetMaxStarGrade() int32 {
	if x != nil {
		return x.MaxStarGrade
	}
	return 0
}

func (x *CharacterExcel) GetJumpable() bool {
	if x != nil {
		return x.Jumpable
	}
	return false
}

func (x *CharacterExcel) GetPersonalityId() int32 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

func (x *CharacterExcel) GetCharacterAIId() int32 {
	if x != nil {
		return x.CharacterAIId
	}
	return 0
}

func (x *CharacterExcel) GetScenarioCharacter() string {
	if x != nil {
		return x.ScenarioCharacter
	}
	return ""
}

func (x *CharacterExcel) GetFavorLevelupType() int32 {
	if x != nil {
		return x.FavorLevelupType
	}
	return 0
}

func (x *CharacterExcel) GetEquipmentSlot() []string {
	if x != nil {
		return x.EquipmentSlot
	}
	return nil
}

func (x *CharacterExcel) GetHpBarHeight() float32 {
	if x != nil {
		return x.HpBarHeight
	}
	return 0
}

func (x *CharacterExcel) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CharacterExcel) GetSecretStoneItemId() int32 {
	if x != nil {
		return x.SecretStoneItemId
	}
	return 0
}

func (x *CharacterExcel) GetSecretStoneItemAmount() int32 {
	if x != nil {
		return x.SecretStoneItemAmount
	}
	return 0
}

func (x *CharacterExcel) GetCharacterPieceItemId() int32 {
	if x != nil {
		return x.CharacterPieceItemId
	}
	return 0
}

func (x *CharacterExcel) GetCharacterPieceItemAmount() int32 {
	if x != nil {
		return x.CharacterPieceItemAmount
	}
	return 0
}

func (x *CharacterExcel) GetCombineRecipeId() int32 {
	if x != nil {
		return x.CombineRecipeId
	}
	return 0
}

var File_excel_server_proto protoreflect.FileDescriptor

var file_excel_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x05,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1a,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb8, 0x02,
	0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x16, 0x4f, 0x72, 0x69, 0x67,
	0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x43,
	0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x18, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x66,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x22, 0x74, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x56, 0x0a, 0x17, 0x4f, 0x72, 0x69, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x17,
	0x4f, 0x72, 0x69, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xa4, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x17, 0x4f,
	0x72, 0x69, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x52, 0x17, 0x4f, 0x72, 0x69, 0x67, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x07, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4a, 0x75, 0x6d, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_excel_server_proto_rawDescOnce sync.Once
	file_excel_server_proto_rawDescData = file_excel_server_proto_rawDesc
)

func file_excel_server_proto_rawDescGZIP() []byte {
	file_excel_server_proto_rawDescOnce.Do(func() {
		file_excel_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_excel_server_proto_rawDescData)
	})
	return file_excel_server_proto_rawDescData
}

var file_excel_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_excel_server_proto_goTypes = []any{
	(*Excel)(nil),                      // 0: proto.Excel
	(*CafeInfoExcelTableInfo)(nil),     // 1: proto.CafeInfoExcelTableInfo
	(*CafeInfoExcelTable)(nil),         // 2: proto.CafeInfoExcelTable
	(*DefaultCharacterExcelTable)(nil), // 3: proto.DefaultCharacterExcelTable
	(*DefaultCharacterExcel)(nil),      // 4: proto.DefaultCharacterExcel
	(*CharacterExcelTable)(nil),        // 5: proto.CharacterExcelTable
	(*CharacterExcel)(nil),             // 6: proto.CharacterExcel
	nil,                                // 7: proto.CafeInfoExcelTableInfo.CafeInfoExcelTablesEntry
	nil,                                // 8: proto.CharacterExcelTable.CharacterExcelMapEntry
}
var file_excel_server_proto_depIdxs = []int32{
	1,  // 0: proto.Excel.CafeInfoExcelTableInfo:type_name -> proto.CafeInfoExcelTableInfo
	3,  // 1: proto.Excel.DefaultCharacterExcelTable:type_name -> proto.DefaultCharacterExcelTable
	5,  // 2: proto.Excel.CharacterExcelTable:type_name -> proto.CharacterExcelTable
	2,  // 3: proto.CafeInfoExcelTableInfo.OrigCafeInfoExcelTable:type_name -> proto.CafeInfoExcelTable
	7,  // 4: proto.CafeInfoExcelTableInfo.CafeInfoExcelTables:type_name -> proto.CafeInfoExcelTableInfo.CafeInfoExcelTablesEntry
	4,  // 5: proto.DefaultCharacterExcelTable.OrigCharacterExcelTable:type_name -> proto.DefaultCharacterExcel
	6,  // 6: proto.CharacterExcelTable.OrigCharacterExcelTable:type_name -> proto.CharacterExcel
	8,  // 7: proto.CharacterExcelTable.CharacterExcelMap:type_name -> proto.CharacterExcelTable.CharacterExcelMapEntry
	2,  // 8: proto.CafeInfoExcelTableInfo.CafeInfoExcelTablesEntry.value:type_name -> proto.CafeInfoExcelTable
	6,  // 9: proto.CharacterExcelTable.CharacterExcelMapEntry.value:type_name -> proto.CharacterExcel
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_excel_server_proto_init() }
func file_excel_server_proto_init() {
	if File_excel_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_excel_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_excel_server_proto_goTypes,
		DependencyIndexes: file_excel_server_proto_depIdxs,
		MessageInfos:      file_excel_server_proto_msgTypes,
	}.Build()
	File_excel_server_proto = out.File
	file_excel_server_proto_rawDesc = nil
	file_excel_server_proto_goTypes = nil
	file_excel_server_proto_depIdxs = nil
}
